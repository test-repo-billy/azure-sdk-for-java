// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The protected material analysis response.
 */
@Immutable
public final class AnalyzeTextProtectedMaterialResult implements JsonSerializable<AnalyzeTextProtectedMaterialResult> {
    /*
     * Analysis result for protected material.
     */
    @Generated
    private final ProtectedMaterialAnalysisResult protectedMaterialAnalysis;

    /**
     * Creates an instance of AnalyzeTextProtectedMaterialResult class.
     * 
     * @param protectedMaterialAnalysis the protectedMaterialAnalysis value to set.
     */
    @Generated
    private AnalyzeTextProtectedMaterialResult(ProtectedMaterialAnalysisResult protectedMaterialAnalysis) {
        this.protectedMaterialAnalysis = protectedMaterialAnalysis;
    }

    /**
     * Get the protectedMaterialAnalysis property: Analysis result for protected material.
     * 
     * @return the protectedMaterialAnalysis value.
     */
    @Generated
    public ProtectedMaterialAnalysisResult getProtectedMaterialAnalysis() {
        return this.protectedMaterialAnalysis;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("protectedMaterialAnalysis", this.protectedMaterialAnalysis);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeTextProtectedMaterialResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeTextProtectedMaterialResult if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeTextProtectedMaterialResult.
     */
    @Generated
    public static AnalyzeTextProtectedMaterialResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProtectedMaterialAnalysisResult protectedMaterialAnalysis = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("protectedMaterialAnalysis".equals(fieldName)) {
                    protectedMaterialAnalysis = ProtectedMaterialAnalysisResult.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new AnalyzeTextProtectedMaterialResult(protectedMaterialAnalysis);
        });
    }
}
