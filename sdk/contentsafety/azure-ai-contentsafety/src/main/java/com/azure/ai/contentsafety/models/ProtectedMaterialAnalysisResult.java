// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The text protected material analysis response.
 */
@Immutable
public final class ProtectedMaterialAnalysisResult implements JsonSerializable<ProtectedMaterialAnalysisResult> {
    /*
     * Analysis result for protected material..
     */
    @Generated
    private final boolean detected;

    /**
     * Creates an instance of ProtectedMaterialAnalysisResult class.
     * 
     * @param detected the detected value to set.
     */
    @Generated
    private ProtectedMaterialAnalysisResult(boolean detected) {
        this.detected = detected;
    }

    /**
     * Get the detected property: Analysis result for protected material..
     * 
     * @return the detected value.
     */
    @Generated
    public boolean isDetected() {
        return this.detected;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("detected", this.detected);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProtectedMaterialAnalysisResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProtectedMaterialAnalysisResult if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ProtectedMaterialAnalysisResult.
     */
    @Generated
    public static ProtectedMaterialAnalysisResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean detected = false;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("detected".equals(fieldName)) {
                    detected = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }
            return new ProtectedMaterialAnalysisResult(detected);
        });
    }
}
