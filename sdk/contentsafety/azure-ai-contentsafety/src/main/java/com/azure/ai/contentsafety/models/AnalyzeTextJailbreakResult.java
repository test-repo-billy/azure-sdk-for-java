// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The text jailbreak analysis request.
 */
@Immutable
public final class AnalyzeTextJailbreakResult implements JsonSerializable<AnalyzeTextJailbreakResult> {
    /*
     * Analysis result for jailbreak.
     */
    @Generated
    private final JailbreakAnalysisResult jailbreakAnalysis;

    /**
     * Creates an instance of AnalyzeTextJailbreakResult class.
     * 
     * @param jailbreakAnalysis the jailbreakAnalysis value to set.
     */
    @Generated
    private AnalyzeTextJailbreakResult(JailbreakAnalysisResult jailbreakAnalysis) {
        this.jailbreakAnalysis = jailbreakAnalysis;
    }

    /**
     * Get the jailbreakAnalysis property: Analysis result for jailbreak.
     * 
     * @return the jailbreakAnalysis value.
     */
    @Generated
    public JailbreakAnalysisResult getJailbreakAnalysis() {
        return this.jailbreakAnalysis;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("jailbreakAnalysis", this.jailbreakAnalysis);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeTextJailbreakResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeTextJailbreakResult if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeTextJailbreakResult.
     */
    @Generated
    public static AnalyzeTextJailbreakResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JailbreakAnalysisResult jailbreakAnalysis = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jailbreakAnalysis".equals(fieldName)) {
                    jailbreakAnalysis = JailbreakAnalysisResult.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new AnalyzeTextJailbreakResult(jailbreakAnalysis);
        });
    }
}
