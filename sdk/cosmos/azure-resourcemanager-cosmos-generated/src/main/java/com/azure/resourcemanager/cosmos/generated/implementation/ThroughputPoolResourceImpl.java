// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.fluent.models.ThroughputPoolResourceInner;
import com.azure.resourcemanager.cosmos.generated.models.Status;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputPoolResource;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputPoolUpdate;
import java.util.Collections;
import java.util.Map;

public final class ThroughputPoolResourceImpl
    implements ThroughputPoolResource, ThroughputPoolResource.Definition, ThroughputPoolResource.Update {
    private ThroughputPoolResourceInner innerObject;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Status provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Integer maxThroughput() {
        return this.innerModel().maxThroughput();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ThroughputPoolResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String throughputPoolName;

    private ThroughputPoolUpdate updateBody;

    public ThroughputPoolResourceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ThroughputPoolResource create() {
        this.innerObject = serviceManager.serviceClient().getThroughputPoolOperations()
            .createOrUpdate(resourceGroupName, throughputPoolName, this.innerModel(), Context.NONE);
        return this;
    }

    public ThroughputPoolResource create(Context context) {
        this.innerObject = serviceManager.serviceClient().getThroughputPoolOperations()
            .createOrUpdate(resourceGroupName, throughputPoolName, this.innerModel(), context);
        return this;
    }

    ThroughputPoolResourceImpl(String name, com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = new ThroughputPoolResourceInner();
        this.serviceManager = serviceManager;
        this.throughputPoolName = name;
    }

    public ThroughputPoolResourceImpl update() {
        this.updateBody = new ThroughputPoolUpdate();
        return this;
    }

    public ThroughputPoolResource apply() {
        this.innerObject = serviceManager.serviceClient().getThroughputPoolOperations().update(resourceGroupName,
            throughputPoolName, updateBody, Context.NONE);
        return this;
    }

    public ThroughputPoolResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getThroughputPoolOperations().update(resourceGroupName,
            throughputPoolName, updateBody, context);
        return this;
    }

    ThroughputPoolResourceImpl(ThroughputPoolResourceInner innerObject,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.throughputPoolName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "throughputPools");
    }

    public ThroughputPoolResource refresh() {
        this.innerObject = serviceManager.serviceClient().getThroughputPoolOperations()
            .getByResourceGroupWithResponse(resourceGroupName, throughputPoolName, Context.NONE).getValue();
        return this;
    }

    public ThroughputPoolResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getThroughputPoolOperations()
            .getByResourceGroupWithResponse(resourceGroupName, throughputPoolName, context).getValue();
        return this;
    }

    public ThroughputPoolResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ThroughputPoolResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ThroughputPoolResourceImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public ThroughputPoolResourceImpl withProvisioningState(Status provisioningState) {
        if (isInCreateMode()) {
            this.innerModel().withProvisioningState(provisioningState);
            return this;
        } else {
            this.updateBody.withProvisioningState(provisioningState);
            return this;
        }
    }

    public ThroughputPoolResourceImpl withMaxThroughput(Integer maxThroughput) {
        if (isInCreateMode()) {
            this.innerModel().withMaxThroughput(maxThroughput);
            return this;
        } else {
            this.updateBody.withMaxThroughput(maxThroughput);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
