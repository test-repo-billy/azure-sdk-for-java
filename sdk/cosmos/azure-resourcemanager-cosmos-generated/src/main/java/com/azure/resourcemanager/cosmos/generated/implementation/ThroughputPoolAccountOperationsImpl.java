// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.ThroughputPoolAccountOperationsClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.ThroughputPoolAccountResourceInner;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputPoolAccountOperations;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputPoolAccountResource;

public final class ThroughputPoolAccountOperationsImpl implements ThroughputPoolAccountOperations {
    private static final ClientLogger LOGGER = new ClientLogger(ThroughputPoolAccountOperationsImpl.class);

    private final ThroughputPoolAccountOperationsClient innerClient;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public ThroughputPoolAccountOperationsImpl(ThroughputPoolAccountOperationsClient innerClient,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ThroughputPoolAccountResource> getWithResponse(String resourceGroupName, String throughputPoolName,
        String throughputPoolAccountName, Context context) {
        Response<ThroughputPoolAccountResourceInner> inner = this.serviceClient().getWithResponse(resourceGroupName,
            throughputPoolName, throughputPoolAccountName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ThroughputPoolAccountResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ThroughputPoolAccountResource get(String resourceGroupName, String throughputPoolName,
        String throughputPoolAccountName) {
        ThroughputPoolAccountResourceInner inner
            = this.serviceClient().get(resourceGroupName, throughputPoolName, throughputPoolAccountName);
        if (inner != null) {
            return new ThroughputPoolAccountResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String throughputPoolName, String throughputPoolAccountName) {
        this.serviceClient().delete(resourceGroupName, throughputPoolName, throughputPoolAccountName);
    }

    public void delete(String resourceGroupName, String throughputPoolName, String throughputPoolAccountName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, throughputPoolName, throughputPoolAccountName, context);
    }

    public ThroughputPoolAccountResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String throughputPoolName = ResourceManagerUtils.getValueFromIdByName(id, "throughputPools");
        if (throughputPoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'throughputPools'.", id)));
        }
        String throughputPoolAccountName = ResourceManagerUtils.getValueFromIdByName(id, "throughputPoolAccounts");
        if (throughputPoolAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'throughputPoolAccounts'.", id)));
        }
        return this.getWithResponse(resourceGroupName, throughputPoolName, throughputPoolAccountName, Context.NONE)
            .getValue();
    }

    public Response<ThroughputPoolAccountResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String throughputPoolName = ResourceManagerUtils.getValueFromIdByName(id, "throughputPools");
        if (throughputPoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'throughputPools'.", id)));
        }
        String throughputPoolAccountName = ResourceManagerUtils.getValueFromIdByName(id, "throughputPoolAccounts");
        if (throughputPoolAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'throughputPoolAccounts'.", id)));
        }
        return this.getWithResponse(resourceGroupName, throughputPoolName, throughputPoolAccountName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String throughputPoolName = ResourceManagerUtils.getValueFromIdByName(id, "throughputPools");
        if (throughputPoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'throughputPools'.", id)));
        }
        String throughputPoolAccountName = ResourceManagerUtils.getValueFromIdByName(id, "throughputPoolAccounts");
        if (throughputPoolAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'throughputPoolAccounts'.", id)));
        }
        this.delete(resourceGroupName, throughputPoolName, throughputPoolAccountName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String throughputPoolName = ResourceManagerUtils.getValueFromIdByName(id, "throughputPools");
        if (throughputPoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'throughputPools'.", id)));
        }
        String throughputPoolAccountName = ResourceManagerUtils.getValueFromIdByName(id, "throughputPoolAccounts");
        if (throughputPoolAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'throughputPoolAccounts'.", id)));
        }
        this.delete(resourceGroupName, throughputPoolName, throughputPoolAccountName, context);
    }

    private ThroughputPoolAccountOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    public ThroughputPoolAccountResourceImpl define(String name) {
        return new ThroughputPoolAccountResourceImpl(name, this.manager());
    }
}
