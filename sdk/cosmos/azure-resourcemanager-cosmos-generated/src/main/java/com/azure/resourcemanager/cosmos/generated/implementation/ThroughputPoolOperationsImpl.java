// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.ThroughputPoolOperationsClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.ThroughputPoolResourceInner;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputPoolOperations;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputPoolResource;

public final class ThroughputPoolOperationsImpl implements ThroughputPoolOperations {
    private static final ClientLogger LOGGER = new ClientLogger(ThroughputPoolOperationsImpl.class);

    private final ThroughputPoolOperationsClient innerClient;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public ThroughputPoolOperationsImpl(ThroughputPoolOperationsClient innerClient,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ThroughputPoolResource> getByResourceGroupWithResponse(String resourceGroupName,
        String throughputPoolName, Context context) {
        Response<ThroughputPoolResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, throughputPoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ThroughputPoolResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ThroughputPoolResource getByResourceGroup(String resourceGroupName, String throughputPoolName) {
        ThroughputPoolResourceInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, throughputPoolName);
        if (inner != null) {
            return new ThroughputPoolResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String throughputPoolName) {
        this.serviceClient().delete(resourceGroupName, throughputPoolName);
    }

    public void delete(String resourceGroupName, String throughputPoolName, Context context) {
        this.serviceClient().delete(resourceGroupName, throughputPoolName, context);
    }

    public ThroughputPoolResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String throughputPoolName = ResourceManagerUtils.getValueFromIdByName(id, "throughputPools");
        if (throughputPoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'throughputPools'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, throughputPoolName, Context.NONE).getValue();
    }

    public Response<ThroughputPoolResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String throughputPoolName = ResourceManagerUtils.getValueFromIdByName(id, "throughputPools");
        if (throughputPoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'throughputPools'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, throughputPoolName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String throughputPoolName = ResourceManagerUtils.getValueFromIdByName(id, "throughputPools");
        if (throughputPoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'throughputPools'.", id)));
        }
        this.delete(resourceGroupName, throughputPoolName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String throughputPoolName = ResourceManagerUtils.getValueFromIdByName(id, "throughputPools");
        if (throughputPoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'throughputPools'.", id)));
        }
        this.delete(resourceGroupName, throughputPoolName, context);
    }

    private ThroughputPoolOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    public ThroughputPoolResourceImpl define(String name) {
        return new ThroughputPoolResourceImpl(name, this.manager());
    }
}
