// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.CosmosDBManagementClient;
import com.azure.resourcemanager.cosmos.generated.implementation.CassandraClustersImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.CassandraDataCentersImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.CassandraResourcesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.CollectionPartitionRegionsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.CollectionPartitionsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.CollectionRegionsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.CollectionsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.CosmosDBManagementClientBuilder;
import com.azure.resourcemanager.cosmos.generated.implementation.DataTransferJobsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.DatabaseAccountRegionsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.DatabaseAccountsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.DatabasesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.GraphResourcesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.GremlinResourcesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.LocationsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.MongoClustersImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.MongoDBResourcesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.NotebookWorkspacesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.OperationsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.PartitionKeyRangeIdRegionsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.PartitionKeyRangeIdsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.PercentileSourceTargetsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.PercentileTargetsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.PercentilesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.PrivateEndpointConnectionsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.PrivateLinkResourcesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.RestorableDatabaseAccountsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.RestorableGremlinDatabasesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.RestorableGremlinGraphsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.RestorableGremlinResourcesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.RestorableMongodbCollectionsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.RestorableMongodbDatabasesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.RestorableMongodbResourcesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.RestorableSqlContainersImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.RestorableSqlDatabasesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.RestorableSqlResourcesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.RestorableTableResourcesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.RestorableTablesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.ServicesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.SqlResourcesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.TableResourcesImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.ThroughputPoolAccountOperationsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.ThroughputPoolAccountsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.ThroughputPoolOperationsImpl;
import com.azure.resourcemanager.cosmos.generated.implementation.ThroughputPoolsImpl;
import com.azure.resourcemanager.cosmos.generated.models.CassandraClusters;
import com.azure.resourcemanager.cosmos.generated.models.CassandraDataCenters;
import com.azure.resourcemanager.cosmos.generated.models.CassandraResources;
import com.azure.resourcemanager.cosmos.generated.models.CollectionPartitionRegions;
import com.azure.resourcemanager.cosmos.generated.models.CollectionPartitions;
import com.azure.resourcemanager.cosmos.generated.models.CollectionRegions;
import com.azure.resourcemanager.cosmos.generated.models.Collections;
import com.azure.resourcemanager.cosmos.generated.models.DataTransferJobs;
import com.azure.resourcemanager.cosmos.generated.models.DatabaseAccountRegions;
import com.azure.resourcemanager.cosmos.generated.models.DatabaseAccounts;
import com.azure.resourcemanager.cosmos.generated.models.Databases;
import com.azure.resourcemanager.cosmos.generated.models.GraphResources;
import com.azure.resourcemanager.cosmos.generated.models.GremlinResources;
import com.azure.resourcemanager.cosmos.generated.models.Locations;
import com.azure.resourcemanager.cosmos.generated.models.MongoClusters;
import com.azure.resourcemanager.cosmos.generated.models.MongoDBResources;
import com.azure.resourcemanager.cosmos.generated.models.NotebookWorkspaces;
import com.azure.resourcemanager.cosmos.generated.models.Operations;
import com.azure.resourcemanager.cosmos.generated.models.PartitionKeyRangeIdRegions;
import com.azure.resourcemanager.cosmos.generated.models.PartitionKeyRangeIds;
import com.azure.resourcemanager.cosmos.generated.models.PercentileSourceTargets;
import com.azure.resourcemanager.cosmos.generated.models.PercentileTargets;
import com.azure.resourcemanager.cosmos.generated.models.Percentiles;
import com.azure.resourcemanager.cosmos.generated.models.PrivateEndpointConnections;
import com.azure.resourcemanager.cosmos.generated.models.PrivateLinkResources;
import com.azure.resourcemanager.cosmos.generated.models.RestorableDatabaseAccounts;
import com.azure.resourcemanager.cosmos.generated.models.RestorableGremlinDatabases;
import com.azure.resourcemanager.cosmos.generated.models.RestorableGremlinGraphs;
import com.azure.resourcemanager.cosmos.generated.models.RestorableGremlinResources;
import com.azure.resourcemanager.cosmos.generated.models.RestorableMongodbCollections;
import com.azure.resourcemanager.cosmos.generated.models.RestorableMongodbDatabases;
import com.azure.resourcemanager.cosmos.generated.models.RestorableMongodbResources;
import com.azure.resourcemanager.cosmos.generated.models.RestorableSqlContainers;
import com.azure.resourcemanager.cosmos.generated.models.RestorableSqlDatabases;
import com.azure.resourcemanager.cosmos.generated.models.RestorableSqlResources;
import com.azure.resourcemanager.cosmos.generated.models.RestorableTableResources;
import com.azure.resourcemanager.cosmos.generated.models.RestorableTables;
import com.azure.resourcemanager.cosmos.generated.models.Services;
import com.azure.resourcemanager.cosmos.generated.models.SqlResources;
import com.azure.resourcemanager.cosmos.generated.models.TableResources;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputPoolAccountOperations;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputPoolAccounts;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputPoolOperations;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputPools;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Entry point to CosmosDBManager.
 * Azure Cosmos DB Database Service Resource Provider REST API.
 */
public final class CosmosDBManager {
    private DatabaseAccounts databaseAccounts;

    private Operations operations;

    private Databases databases;

    private Collections collections;

    private CollectionRegions collectionRegions;

    private DatabaseAccountRegions databaseAccountRegions;

    private PercentileSourceTargets percentileSourceTargets;

    private PercentileTargets percentileTargets;

    private Percentiles percentiles;

    private CollectionPartitionRegions collectionPartitionRegions;

    private CollectionPartitions collectionPartitions;

    private PartitionKeyRangeIds partitionKeyRangeIds;

    private PartitionKeyRangeIdRegions partitionKeyRangeIdRegions;

    private GraphResources graphResources;

    private SqlResources sqlResources;

    private MongoDBResources mongoDBResources;

    private TableResources tableResources;

    private CassandraResources cassandraResources;

    private GremlinResources gremlinResources;

    private Locations locations;

    private DataTransferJobs dataTransferJobs;

    private CassandraClusters cassandraClusters;

    private CassandraDataCenters cassandraDataCenters;

    private MongoClusters mongoClusters;

    private NotebookWorkspaces notebookWorkspaces;

    private PrivateEndpointConnections privateEndpointConnections;

    private PrivateLinkResources privateLinkResources;

    private RestorableDatabaseAccounts restorableDatabaseAccounts;

    private RestorableSqlDatabases restorableSqlDatabases;

    private RestorableSqlContainers restorableSqlContainers;

    private RestorableSqlResources restorableSqlResources;

    private RestorableMongodbDatabases restorableMongodbDatabases;

    private RestorableMongodbCollections restorableMongodbCollections;

    private RestorableMongodbResources restorableMongodbResources;

    private RestorableGremlinDatabases restorableGremlinDatabases;

    private RestorableGremlinGraphs restorableGremlinGraphs;

    private RestorableGremlinResources restorableGremlinResources;

    private RestorableTables restorableTables;

    private RestorableTableResources restorableTableResources;

    private Services services;

    private ThroughputPools throughputPools;

    private ThroughputPoolOperations throughputPoolOperations;

    private ThroughputPoolAccounts throughputPoolAccounts;

    private ThroughputPoolAccountOperations throughputPoolAccountOperations;

    private final CosmosDBManagementClient clientObject;

    private CosmosDBManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject = new CosmosDBManagementClientBuilder().pipeline(httpPipeline)
            .endpoint(profile.getEnvironment().getResourceManagerEndpoint()).subscriptionId(profile.getSubscriptionId())
            .defaultPollInterval(defaultPollInterval).buildClient();
    }

    /**
     * Creates an instance of CosmosDB service API entry point.
     * 
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the CosmosDB service API instance.
     */
    public static CosmosDBManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of CosmosDB service API entry point.
     * 
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the CosmosDB service API instance.
     */
    public static CosmosDBManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new CosmosDBManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create CosmosDBManager with optional configuration.
     * 
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new CosmosDBManager.Configurable();
    }

    /**
     * The Configurable allowing configurations to be set.
     */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         * <p>
         * This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval
                = Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of CosmosDB service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the CosmosDB service API instance.
         */
        public CosmosDBManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder.append("azsdk-java").append("-").append("com.azure.resourcemanager.cosmos.generated")
                .append("/").append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder.append(" (").append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ").append(Configuration.getGlobalConfiguration().get("os.name")).append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version")).append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies.addAll(this.policies.stream().filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY).collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline = new HttpPipelineBuilder().httpClient(httpClient)
                .policies(policies.toArray(new HttpPipelinePolicy[0])).build();
            return new CosmosDBManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of DatabaseAccounts. It manages DatabaseAccountGetResults.
     * 
     * @return Resource collection API of DatabaseAccounts.
     */
    public DatabaseAccounts databaseAccounts() {
        if (this.databaseAccounts == null) {
            this.databaseAccounts = new DatabaseAccountsImpl(clientObject.getDatabaseAccounts(), this);
        }
        return databaseAccounts;
    }

    /**
     * Gets the resource collection API of Operations.
     * 
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of Databases.
     * 
     * @return Resource collection API of Databases.
     */
    public Databases databases() {
        if (this.databases == null) {
            this.databases = new DatabasesImpl(clientObject.getDatabases(), this);
        }
        return databases;
    }

    /**
     * Gets the resource collection API of Collections.
     * 
     * @return Resource collection API of Collections.
     */
    public Collections collections() {
        if (this.collections == null) {
            this.collections = new CollectionsImpl(clientObject.getCollections(), this);
        }
        return collections;
    }

    /**
     * Gets the resource collection API of CollectionRegions.
     * 
     * @return Resource collection API of CollectionRegions.
     */
    public CollectionRegions collectionRegions() {
        if (this.collectionRegions == null) {
            this.collectionRegions = new CollectionRegionsImpl(clientObject.getCollectionRegions(), this);
        }
        return collectionRegions;
    }

    /**
     * Gets the resource collection API of DatabaseAccountRegions.
     * 
     * @return Resource collection API of DatabaseAccountRegions.
     */
    public DatabaseAccountRegions databaseAccountRegions() {
        if (this.databaseAccountRegions == null) {
            this.databaseAccountRegions
                = new DatabaseAccountRegionsImpl(clientObject.getDatabaseAccountRegions(), this);
        }
        return databaseAccountRegions;
    }

    /**
     * Gets the resource collection API of PercentileSourceTargets.
     * 
     * @return Resource collection API of PercentileSourceTargets.
     */
    public PercentileSourceTargets percentileSourceTargets() {
        if (this.percentileSourceTargets == null) {
            this.percentileSourceTargets
                = new PercentileSourceTargetsImpl(clientObject.getPercentileSourceTargets(), this);
        }
        return percentileSourceTargets;
    }

    /**
     * Gets the resource collection API of PercentileTargets.
     * 
     * @return Resource collection API of PercentileTargets.
     */
    public PercentileTargets percentileTargets() {
        if (this.percentileTargets == null) {
            this.percentileTargets = new PercentileTargetsImpl(clientObject.getPercentileTargets(), this);
        }
        return percentileTargets;
    }

    /**
     * Gets the resource collection API of Percentiles.
     * 
     * @return Resource collection API of Percentiles.
     */
    public Percentiles percentiles() {
        if (this.percentiles == null) {
            this.percentiles = new PercentilesImpl(clientObject.getPercentiles(), this);
        }
        return percentiles;
    }

    /**
     * Gets the resource collection API of CollectionPartitionRegions.
     * 
     * @return Resource collection API of CollectionPartitionRegions.
     */
    public CollectionPartitionRegions collectionPartitionRegions() {
        if (this.collectionPartitionRegions == null) {
            this.collectionPartitionRegions
                = new CollectionPartitionRegionsImpl(clientObject.getCollectionPartitionRegions(), this);
        }
        return collectionPartitionRegions;
    }

    /**
     * Gets the resource collection API of CollectionPartitions.
     * 
     * @return Resource collection API of CollectionPartitions.
     */
    public CollectionPartitions collectionPartitions() {
        if (this.collectionPartitions == null) {
            this.collectionPartitions = new CollectionPartitionsImpl(clientObject.getCollectionPartitions(), this);
        }
        return collectionPartitions;
    }

    /**
     * Gets the resource collection API of PartitionKeyRangeIds.
     * 
     * @return Resource collection API of PartitionKeyRangeIds.
     */
    public PartitionKeyRangeIds partitionKeyRangeIds() {
        if (this.partitionKeyRangeIds == null) {
            this.partitionKeyRangeIds = new PartitionKeyRangeIdsImpl(clientObject.getPartitionKeyRangeIds(), this);
        }
        return partitionKeyRangeIds;
    }

    /**
     * Gets the resource collection API of PartitionKeyRangeIdRegions.
     * 
     * @return Resource collection API of PartitionKeyRangeIdRegions.
     */
    public PartitionKeyRangeIdRegions partitionKeyRangeIdRegions() {
        if (this.partitionKeyRangeIdRegions == null) {
            this.partitionKeyRangeIdRegions
                = new PartitionKeyRangeIdRegionsImpl(clientObject.getPartitionKeyRangeIdRegions(), this);
        }
        return partitionKeyRangeIdRegions;
    }

    /**
     * Gets the resource collection API of GraphResources. It manages GraphResourceGetResults.
     * 
     * @return Resource collection API of GraphResources.
     */
    public GraphResources graphResources() {
        if (this.graphResources == null) {
            this.graphResources = new GraphResourcesImpl(clientObject.getGraphResources(), this);
        }
        return graphResources;
    }

    /**
     * Gets the resource collection API of SqlResources. It manages SqlDatabaseGetResults,
     * ClientEncryptionKeyGetResults, SqlContainerGetResults, SqlStoredProcedureGetResults,
     * SqlUserDefinedFunctionGetResults, SqlTriggerGetResults, SqlRoleDefinitionGetResults, SqlRoleAssignmentGetResults.
     * 
     * @return Resource collection API of SqlResources.
     */
    public SqlResources sqlResources() {
        if (this.sqlResources == null) {
            this.sqlResources = new SqlResourcesImpl(clientObject.getSqlResources(), this);
        }
        return sqlResources;
    }

    /**
     * Gets the resource collection API of MongoDBResources. It manages MongoDBDatabaseGetResults,
     * MongoDBCollectionGetResults, MongoRoleDefinitionGetResults, MongoUserDefinitionGetResults.
     * 
     * @return Resource collection API of MongoDBResources.
     */
    public MongoDBResources mongoDBResources() {
        if (this.mongoDBResources == null) {
            this.mongoDBResources = new MongoDBResourcesImpl(clientObject.getMongoDBResources(), this);
        }
        return mongoDBResources;
    }

    /**
     * Gets the resource collection API of TableResources. It manages TableGetResults.
     * 
     * @return Resource collection API of TableResources.
     */
    public TableResources tableResources() {
        if (this.tableResources == null) {
            this.tableResources = new TableResourcesImpl(clientObject.getTableResources(), this);
        }
        return tableResources;
    }

    /**
     * Gets the resource collection API of CassandraResources. It manages CassandraKeyspaceGetResults,
     * CassandraTableGetResults, CassandraViewGetResults.
     * 
     * @return Resource collection API of CassandraResources.
     */
    public CassandraResources cassandraResources() {
        if (this.cassandraResources == null) {
            this.cassandraResources = new CassandraResourcesImpl(clientObject.getCassandraResources(), this);
        }
        return cassandraResources;
    }

    /**
     * Gets the resource collection API of GremlinResources. It manages GremlinDatabaseGetResults,
     * GremlinGraphGetResults.
     * 
     * @return Resource collection API of GremlinResources.
     */
    public GremlinResources gremlinResources() {
        if (this.gremlinResources == null) {
            this.gremlinResources = new GremlinResourcesImpl(clientObject.getGremlinResources(), this);
        }
        return gremlinResources;
    }

    /**
     * Gets the resource collection API of Locations.
     * 
     * @return Resource collection API of Locations.
     */
    public Locations locations() {
        if (this.locations == null) {
            this.locations = new LocationsImpl(clientObject.getLocations(), this);
        }
        return locations;
    }

    /**
     * Gets the resource collection API of DataTransferJobs. It manages DataTransferJobGetResults.
     * 
     * @return Resource collection API of DataTransferJobs.
     */
    public DataTransferJobs dataTransferJobs() {
        if (this.dataTransferJobs == null) {
            this.dataTransferJobs = new DataTransferJobsImpl(clientObject.getDataTransferJobs(), this);
        }
        return dataTransferJobs;
    }

    /**
     * Gets the resource collection API of CassandraClusters. It manages ClusterResource.
     * 
     * @return Resource collection API of CassandraClusters.
     */
    public CassandraClusters cassandraClusters() {
        if (this.cassandraClusters == null) {
            this.cassandraClusters = new CassandraClustersImpl(clientObject.getCassandraClusters(), this);
        }
        return cassandraClusters;
    }

    /**
     * Gets the resource collection API of CassandraDataCenters. It manages DataCenterResource.
     * 
     * @return Resource collection API of CassandraDataCenters.
     */
    public CassandraDataCenters cassandraDataCenters() {
        if (this.cassandraDataCenters == null) {
            this.cassandraDataCenters = new CassandraDataCentersImpl(clientObject.getCassandraDataCenters(), this);
        }
        return cassandraDataCenters;
    }

    /**
     * Gets the resource collection API of MongoClusters. It manages MongoCluster, FirewallRule.
     * 
     * @return Resource collection API of MongoClusters.
     */
    public MongoClusters mongoClusters() {
        if (this.mongoClusters == null) {
            this.mongoClusters = new MongoClustersImpl(clientObject.getMongoClusters(), this);
        }
        return mongoClusters;
    }

    /**
     * Gets the resource collection API of NotebookWorkspaces. It manages NotebookWorkspace.
     * 
     * @return Resource collection API of NotebookWorkspaces.
     */
    public NotebookWorkspaces notebookWorkspaces() {
        if (this.notebookWorkspaces == null) {
            this.notebookWorkspaces = new NotebookWorkspacesImpl(clientObject.getNotebookWorkspaces(), this);
        }
        return notebookWorkspaces;
    }

    /**
     * Gets the resource collection API of PrivateEndpointConnections. It manages PrivateEndpointConnection.
     * 
     * @return Resource collection API of PrivateEndpointConnections.
     */
    public PrivateEndpointConnections privateEndpointConnections() {
        if (this.privateEndpointConnections == null) {
            this.privateEndpointConnections
                = new PrivateEndpointConnectionsImpl(clientObject.getPrivateEndpointConnections(), this);
        }
        return privateEndpointConnections;
    }

    /**
     * Gets the resource collection API of PrivateLinkResources.
     * 
     * @return Resource collection API of PrivateLinkResources.
     */
    public PrivateLinkResources privateLinkResources() {
        if (this.privateLinkResources == null) {
            this.privateLinkResources = new PrivateLinkResourcesImpl(clientObject.getPrivateLinkResources(), this);
        }
        return privateLinkResources;
    }

    /**
     * Gets the resource collection API of RestorableDatabaseAccounts.
     * 
     * @return Resource collection API of RestorableDatabaseAccounts.
     */
    public RestorableDatabaseAccounts restorableDatabaseAccounts() {
        if (this.restorableDatabaseAccounts == null) {
            this.restorableDatabaseAccounts
                = new RestorableDatabaseAccountsImpl(clientObject.getRestorableDatabaseAccounts(), this);
        }
        return restorableDatabaseAccounts;
    }

    /**
     * Gets the resource collection API of RestorableSqlDatabases.
     * 
     * @return Resource collection API of RestorableSqlDatabases.
     */
    public RestorableSqlDatabases restorableSqlDatabases() {
        if (this.restorableSqlDatabases == null) {
            this.restorableSqlDatabases
                = new RestorableSqlDatabasesImpl(clientObject.getRestorableSqlDatabases(), this);
        }
        return restorableSqlDatabases;
    }

    /**
     * Gets the resource collection API of RestorableSqlContainers.
     * 
     * @return Resource collection API of RestorableSqlContainers.
     */
    public RestorableSqlContainers restorableSqlContainers() {
        if (this.restorableSqlContainers == null) {
            this.restorableSqlContainers
                = new RestorableSqlContainersImpl(clientObject.getRestorableSqlContainers(), this);
        }
        return restorableSqlContainers;
    }

    /**
     * Gets the resource collection API of RestorableSqlResources.
     * 
     * @return Resource collection API of RestorableSqlResources.
     */
    public RestorableSqlResources restorableSqlResources() {
        if (this.restorableSqlResources == null) {
            this.restorableSqlResources
                = new RestorableSqlResourcesImpl(clientObject.getRestorableSqlResources(), this);
        }
        return restorableSqlResources;
    }

    /**
     * Gets the resource collection API of RestorableMongodbDatabases.
     * 
     * @return Resource collection API of RestorableMongodbDatabases.
     */
    public RestorableMongodbDatabases restorableMongodbDatabases() {
        if (this.restorableMongodbDatabases == null) {
            this.restorableMongodbDatabases
                = new RestorableMongodbDatabasesImpl(clientObject.getRestorableMongodbDatabases(), this);
        }
        return restorableMongodbDatabases;
    }

    /**
     * Gets the resource collection API of RestorableMongodbCollections.
     * 
     * @return Resource collection API of RestorableMongodbCollections.
     */
    public RestorableMongodbCollections restorableMongodbCollections() {
        if (this.restorableMongodbCollections == null) {
            this.restorableMongodbCollections
                = new RestorableMongodbCollectionsImpl(clientObject.getRestorableMongodbCollections(), this);
        }
        return restorableMongodbCollections;
    }

    /**
     * Gets the resource collection API of RestorableMongodbResources.
     * 
     * @return Resource collection API of RestorableMongodbResources.
     */
    public RestorableMongodbResources restorableMongodbResources() {
        if (this.restorableMongodbResources == null) {
            this.restorableMongodbResources
                = new RestorableMongodbResourcesImpl(clientObject.getRestorableMongodbResources(), this);
        }
        return restorableMongodbResources;
    }

    /**
     * Gets the resource collection API of RestorableGremlinDatabases.
     * 
     * @return Resource collection API of RestorableGremlinDatabases.
     */
    public RestorableGremlinDatabases restorableGremlinDatabases() {
        if (this.restorableGremlinDatabases == null) {
            this.restorableGremlinDatabases
                = new RestorableGremlinDatabasesImpl(clientObject.getRestorableGremlinDatabases(), this);
        }
        return restorableGremlinDatabases;
    }

    /**
     * Gets the resource collection API of RestorableGremlinGraphs.
     * 
     * @return Resource collection API of RestorableGremlinGraphs.
     */
    public RestorableGremlinGraphs restorableGremlinGraphs() {
        if (this.restorableGremlinGraphs == null) {
            this.restorableGremlinGraphs
                = new RestorableGremlinGraphsImpl(clientObject.getRestorableGremlinGraphs(), this);
        }
        return restorableGremlinGraphs;
    }

    /**
     * Gets the resource collection API of RestorableGremlinResources.
     * 
     * @return Resource collection API of RestorableGremlinResources.
     */
    public RestorableGremlinResources restorableGremlinResources() {
        if (this.restorableGremlinResources == null) {
            this.restorableGremlinResources
                = new RestorableGremlinResourcesImpl(clientObject.getRestorableGremlinResources(), this);
        }
        return restorableGremlinResources;
    }

    /**
     * Gets the resource collection API of RestorableTables.
     * 
     * @return Resource collection API of RestorableTables.
     */
    public RestorableTables restorableTables() {
        if (this.restorableTables == null) {
            this.restorableTables = new RestorableTablesImpl(clientObject.getRestorableTables(), this);
        }
        return restorableTables;
    }

    /**
     * Gets the resource collection API of RestorableTableResources.
     * 
     * @return Resource collection API of RestorableTableResources.
     */
    public RestorableTableResources restorableTableResources() {
        if (this.restorableTableResources == null) {
            this.restorableTableResources
                = new RestorableTableResourcesImpl(clientObject.getRestorableTableResources(), this);
        }
        return restorableTableResources;
    }

    /**
     * Gets the resource collection API of Services. It manages ServiceResource.
     * 
     * @return Resource collection API of Services.
     */
    public Services services() {
        if (this.services == null) {
            this.services = new ServicesImpl(clientObject.getServices(), this);
        }
        return services;
    }

    /**
     * Gets the resource collection API of ThroughputPools.
     * 
     * @return Resource collection API of ThroughputPools.
     */
    public ThroughputPools throughputPools() {
        if (this.throughputPools == null) {
            this.throughputPools = new ThroughputPoolsImpl(clientObject.getThroughputPools(), this);
        }
        return throughputPools;
    }

    /**
     * Gets the resource collection API of ThroughputPoolOperations. It manages ThroughputPoolResource.
     * 
     * @return Resource collection API of ThroughputPoolOperations.
     */
    public ThroughputPoolOperations throughputPoolOperations() {
        if (this.throughputPoolOperations == null) {
            this.throughputPoolOperations
                = new ThroughputPoolOperationsImpl(clientObject.getThroughputPoolOperations(), this);
        }
        return throughputPoolOperations;
    }

    /**
     * Gets the resource collection API of ThroughputPoolAccounts.
     * 
     * @return Resource collection API of ThroughputPoolAccounts.
     */
    public ThroughputPoolAccounts throughputPoolAccounts() {
        if (this.throughputPoolAccounts == null) {
            this.throughputPoolAccounts
                = new ThroughputPoolAccountsImpl(clientObject.getThroughputPoolAccounts(), this);
        }
        return throughputPoolAccounts;
    }

    /**
     * Gets the resource collection API of ThroughputPoolAccountOperations. It manages ThroughputPoolAccountResource.
     * 
     * @return Resource collection API of ThroughputPoolAccountOperations.
     */
    public ThroughputPoolAccountOperations throughputPoolAccountOperations() {
        if (this.throughputPoolAccountOperations == null) {
            this.throughputPoolAccountOperations
                = new ThroughputPoolAccountOperationsImpl(clientObject.getThroughputPoolAccountOperations(), this);
        }
        return throughputPoolAccountOperations;
    }

    /**
     * Gets wrapped service client CosmosDBManagementClient providing direct access to the underlying auto-generated API
     * implementation, based on Azure REST API.
     * 
     * @return Wrapped service client CosmosDBManagementClient.
     */
    public CosmosDBManagementClient serviceClient() {
        return this.clientObject;
    }
}
