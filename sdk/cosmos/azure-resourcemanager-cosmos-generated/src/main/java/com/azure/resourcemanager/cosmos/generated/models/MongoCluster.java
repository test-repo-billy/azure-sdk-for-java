// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.fluent.models.MongoClusterInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of MongoCluster.
 */
public interface MongoCluster {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the createMode property: The mode to create a mongo cluster.
     * 
     * @return the createMode value.
     */
    CreateMode createMode();

    /**
     * Gets the restoreParameters property: Parameters used for restore operations.
     * 
     * @return the restoreParameters value.
     */
    MongoClusterRestoreParameters restoreParameters();

    /**
     * Gets the administratorLogin property: The administrator's login for the mongo cluster.
     * 
     * @return the administratorLogin value.
     */
    String administratorLogin();

    /**
     * Gets the administratorLoginPassword property: The password of the administrator login.
     * 
     * @return the administratorLoginPassword value.
     */
    String administratorLoginPassword();

    /**
     * Gets the serverVersion property: The Mongo DB server version. Defaults to the latest available version if not
     * specified.
     * 
     * @return the serverVersion value.
     */
    String serverVersion();

    /**
     * Gets the connectionString property: The default mongo connection string for the cluster.
     * 
     * @return the connectionString value.
     */
    String connectionString();

    /**
     * Gets the earliestRestoreTime property: Earliest restore timestamp in UTC ISO8601 format.
     * 
     * @return the earliestRestoreTime value.
     */
    String earliestRestoreTime();

    /**
     * Gets the provisioningState property: A provisioning state of the mongo cluster.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the clusterStatus property: A status of the mongo cluster.
     * 
     * @return the clusterStatus value.
     */
    MongoClusterStatus clusterStatus();

    /**
     * Gets the nodeGroupSpecs property: The list of node group specs in the cluster.
     * 
     * @return the nodeGroupSpecs value.
     */
    List<NodeGroupSpec> nodeGroupSpecs();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.cosmos.generated.fluent.models.MongoClusterInner object.
     * 
     * @return the inner object.
     */
    MongoClusterInner innerModel();

    /**
     * The entirety of the MongoCluster definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * The MongoCluster definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the MongoCluster definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the MongoCluster definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the MongoCluster definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the MongoCluster definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags, DefinitionStages.WithCreateMode, DefinitionStages.WithRestoreParameters,
            DefinitionStages.WithAdministratorLogin, DefinitionStages.WithAdministratorLoginPassword,
            DefinitionStages.WithServerVersion, DefinitionStages.WithNodeGroupSpecs {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            MongoCluster create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            MongoCluster create(Context context);
        }

        /**
         * The stage of the MongoCluster definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the MongoCluster definition allowing to specify createMode.
         */
        interface WithCreateMode {
            /**
             * Specifies the createMode property: The mode to create a mongo cluster..
             * 
             * @param createMode The mode to create a mongo cluster.
             * @return the next definition stage.
             */
            WithCreate withCreateMode(CreateMode createMode);
        }

        /**
         * The stage of the MongoCluster definition allowing to specify restoreParameters.
         */
        interface WithRestoreParameters {
            /**
             * Specifies the restoreParameters property: Parameters used for restore operations.
             * 
             * @param restoreParameters Parameters used for restore operations.
             * @return the next definition stage.
             */
            WithCreate withRestoreParameters(MongoClusterRestoreParameters restoreParameters);
        }

        /**
         * The stage of the MongoCluster definition allowing to specify administratorLogin.
         */
        interface WithAdministratorLogin {
            /**
             * Specifies the administratorLogin property: The administrator's login for the mongo cluster..
             * 
             * @param administratorLogin The administrator's login for the mongo cluster.
             * @return the next definition stage.
             */
            WithCreate withAdministratorLogin(String administratorLogin);
        }

        /**
         * The stage of the MongoCluster definition allowing to specify administratorLoginPassword.
         */
        interface WithAdministratorLoginPassword {
            /**
             * Specifies the administratorLoginPassword property: The password of the administrator login..
             * 
             * @param administratorLoginPassword The password of the administrator login.
             * @return the next definition stage.
             */
            WithCreate withAdministratorLoginPassword(String administratorLoginPassword);
        }

        /**
         * The stage of the MongoCluster definition allowing to specify serverVersion.
         */
        interface WithServerVersion {
            /**
             * Specifies the serverVersion property: The Mongo DB server version. Defaults to the latest available
             * version if not specified..
             * 
             * @param serverVersion The Mongo DB server version. Defaults to the latest available version if not
             * specified.
             * @return the next definition stage.
             */
            WithCreate withServerVersion(String serverVersion);
        }

        /**
         * The stage of the MongoCluster definition allowing to specify nodeGroupSpecs.
         */
        interface WithNodeGroupSpecs {
            /**
             * Specifies the nodeGroupSpecs property: The list of node group specs in the cluster..
             * 
             * @param nodeGroupSpecs The list of node group specs in the cluster.
             * @return the next definition stage.
             */
            WithCreate withNodeGroupSpecs(List<NodeGroupSpec> nodeGroupSpecs);
        }
    }

    /**
     * Begins update for the MongoCluster resource.
     * 
     * @return the stage of resource update.
     */
    MongoCluster.Update update();

    /**
     * The template for MongoCluster update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithAdministratorLogin,
        UpdateStages.WithAdministratorLoginPassword, UpdateStages.WithServerVersion, UpdateStages.WithNodeGroupSpecs {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        MongoCluster apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        MongoCluster apply(Context context);
    }

    /**
     * The MongoCluster update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the MongoCluster update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Application-specific metadata in the form of key-value pairs..
             * 
             * @param tags Application-specific metadata in the form of key-value pairs.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the MongoCluster update allowing to specify administratorLogin.
         */
        interface WithAdministratorLogin {
            /**
             * Specifies the administratorLogin property: The administrator's login for the mongo cluster..
             * 
             * @param administratorLogin The administrator's login for the mongo cluster.
             * @return the next definition stage.
             */
            Update withAdministratorLogin(String administratorLogin);
        }

        /**
         * The stage of the MongoCluster update allowing to specify administratorLoginPassword.
         */
        interface WithAdministratorLoginPassword {
            /**
             * Specifies the administratorLoginPassword property: The password of the administrator login..
             * 
             * @param administratorLoginPassword The password of the administrator login.
             * @return the next definition stage.
             */
            Update withAdministratorLoginPassword(String administratorLoginPassword);
        }

        /**
         * The stage of the MongoCluster update allowing to specify serverVersion.
         */
        interface WithServerVersion {
            /**
             * Specifies the serverVersion property: The Mongo DB server version. Defaults to the latest available
             * version if not specified..
             * 
             * @param serverVersion The Mongo DB server version. Defaults to the latest available version if not
             * specified.
             * @return the next definition stage.
             */
            Update withServerVersion(String serverVersion);
        }

        /**
         * The stage of the MongoCluster update allowing to specify nodeGroupSpecs.
         */
        interface WithNodeGroupSpecs {
            /**
             * Specifies the nodeGroupSpecs property: The list of node group specs in the cluster..
             * 
             * @param nodeGroupSpecs The list of node group specs in the cluster.
             * @return the next definition stage.
             */
            Update withNodeGroupSpecs(List<NodeGroupSpec> nodeGroupSpecs);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    MongoCluster refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    MongoCluster refresh(Context context);

    /**
     * List mongo cluster connection strings. This includes the default connection string using SCRAM-SHA-256, as well
     * as other connection strings supported by the cluster.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings for the given mongo cluster along with {@link Response}.
     */
    Response<ListConnectionStringsResult> listConnectionStringsWithResponse(Context context);

    /**
     * List mongo cluster connection strings. This includes the default connection string using SCRAM-SHA-256, as well
     * as other connection strings supported by the cluster.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the connection strings for the given mongo cluster.
     */
    ListConnectionStringsResult listConnectionStrings();
}
