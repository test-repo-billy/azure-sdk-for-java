// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.generated;

import com.azure.resourcemanager.cosmos.generated.models.ClientEncryptionIncludedPath;
import com.azure.resourcemanager.cosmos.generated.models.ClientEncryptionPolicy;
import com.azure.resourcemanager.cosmos.generated.models.ComputedProperty;
import com.azure.resourcemanager.cosmos.generated.models.ConflictResolutionMode;
import com.azure.resourcemanager.cosmos.generated.models.ConflictResolutionPolicy;
import com.azure.resourcemanager.cosmos.generated.models.ContainerPartitionKey;
import com.azure.resourcemanager.cosmos.generated.models.CreateMode;
import com.azure.resourcemanager.cosmos.generated.models.CreateUpdateOptions;
import com.azure.resourcemanager.cosmos.generated.models.DataType;
import com.azure.resourcemanager.cosmos.generated.models.IncludedPath;
import com.azure.resourcemanager.cosmos.generated.models.IndexKind;
import com.azure.resourcemanager.cosmos.generated.models.Indexes;
import com.azure.resourcemanager.cosmos.generated.models.IndexingMode;
import com.azure.resourcemanager.cosmos.generated.models.IndexingPolicy;
import com.azure.resourcemanager.cosmos.generated.models.MaterializedViewDefinition;
import com.azure.resourcemanager.cosmos.generated.models.PartitionKind;
import com.azure.resourcemanager.cosmos.generated.models.ResourceRestoreParameters;
import com.azure.resourcemanager.cosmos.generated.models.SqlContainerResource;
import com.azure.resourcemanager.cosmos.generated.models.UniqueKey;
import com.azure.resourcemanager.cosmos.generated.models.UniqueKeyPolicy;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for SqlResources CreateUpdateSqlContainer.
 */
public final class SqlResourcesCreateUpdateSqlContainerSamples {
    /*
     * x-ms-original-file:
     * specification/cosmos-db/resource-manager/Microsoft.DocumentDB/preview/2024-01-15-preview/examples/
     * CosmosDBSqlMaterializedViewCreateUpdate.json
     */
    /**
     * Sample code: CosmosDBSqlMaterializedViewCreateUpdate.
     * 
     * @param manager Entry point to CosmosDBManager.
     */
    public static void
        cosmosDBSqlMaterializedViewCreateUpdate(com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager) {
        manager.sqlResources().defineUpdateSqlContainer("mvContainerName").withRegion("West US")
            .withExistingSqlDatabase("rg1", "ddb1", "databaseName")
            .withResource(new SqlContainerResource().withId("mvContainerName")
                .withIndexingPolicy(new IndexingPolicy().withAutomatic(true).withIndexingMode(IndexingMode.CONSISTENT)
                    .withIncludedPaths(Arrays.asList(new IncludedPath().withPath("/*")
                        .withIndexes(Arrays.asList(
                            new Indexes().withDataType(DataType.STRING).withPrecision(-1).withKind(IndexKind.RANGE),
                            new Indexes().withDataType(DataType.NUMBER).withPrecision(-1).withKind(IndexKind.RANGE)))))
                    .withExcludedPaths(Arrays.asList()))
                .withPartitionKey(
                    new ContainerPartitionKey().withPaths(Arrays.asList("/mvpk")).withKind(PartitionKind.HASH))
                .withMaterializedViewDefinition(new MaterializedViewDefinition()
                    .withSourceCollectionId("sourceContainerName").withDefinition("select * from ROOT")))
            .withTags(mapOf()).withOptions(new CreateUpdateOptions()).create();
    }

    /*
     * x-ms-original-file:
     * specification/cosmos-db/resource-manager/Microsoft.DocumentDB/preview/2024-01-15-preview/examples/
     * CosmosDBSqlContainerCreateUpdate.json
     */
    /**
     * Sample code: CosmosDBSqlContainerCreateUpdate.
     * 
     * @param manager Entry point to CosmosDBManager.
     */
    public static void
        cosmosDBSqlContainerCreateUpdate(com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager) {
        manager.sqlResources().defineUpdateSqlContainer("containerName").withRegion("West US")
            .withExistingSqlDatabase("rg1", "ddb1", "databaseName")
            .withResource(new SqlContainerResource().withId("containerName")
                .withIndexingPolicy(new IndexingPolicy().withAutomatic(true).withIndexingMode(IndexingMode.CONSISTENT)
                    .withIncludedPaths(Arrays.asList(new IncludedPath().withPath("/*")
                        .withIndexes(Arrays.asList(
                            new Indexes().withDataType(DataType.STRING).withPrecision(-1).withKind(IndexKind.RANGE),
                            new Indexes().withDataType(DataType.NUMBER).withPrecision(-1).withKind(IndexKind.RANGE)))))
                    .withExcludedPaths(Arrays.asList()))
                .withPartitionKey(
                    new ContainerPartitionKey().withPaths(Arrays.asList("/AccountNumber")).withKind(PartitionKind.HASH))
                .withDefaultTtl(100)
                .withUniqueKeyPolicy(new UniqueKeyPolicy()
                    .withUniqueKeys(Arrays.asList(new UniqueKey().withPaths(Arrays.asList("/testPath")))))
                .withConflictResolutionPolicy(new ConflictResolutionPolicy()
                    .withMode(ConflictResolutionMode.LAST_WRITER_WINS).withConflictResolutionPath("/path"))
                .withClientEncryptionPolicy(new ClientEncryptionPolicy()
                    .withIncludedPaths(Arrays.asList(new ClientEncryptionIncludedPath().withPath("/path")
                        .withClientEncryptionKeyId("fakeTokenPlaceholder").withEncryptionType("Deterministic")
                        .withEncryptionAlgorithm("AEAD_AES_256_CBC_HMAC_SHA256")))
                    .withPolicyFormatVersion(2))
                .withComputedProperties(Arrays.asList(
                    new ComputedProperty().withName("cp_lowerName").withQuery("SELECT VALUE LOWER(c.name) FROM c"))))
            .withTags(mapOf()).withOptions(new CreateUpdateOptions()).create();
    }

    /*
     * x-ms-original-file:
     * specification/cosmos-db/resource-manager/Microsoft.DocumentDB/preview/2024-01-15-preview/examples/
     * CosmosDBSqlContainerRestore.json
     */
    /**
     * Sample code: CosmosDBSqlContainerRestore.
     * 
     * @param manager Entry point to CosmosDBManager.
     */
    public static void cosmosDBSqlContainerRestore(com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager) {
        manager.sqlResources().defineUpdateSqlContainer("containerName").withRegion("West US")
            .withExistingSqlDatabase("rg1", "ddb1", "databaseName")
            .withResource(new SqlContainerResource().withId("containerName")
                .withRestoreParameters(new ResourceRestoreParameters().withRestoreSource(
                    "/subscriptions/subid/providers/Microsoft.DocumentDB/locations/WestUS/restorableDatabaseAccounts/restorableDatabaseAccountId")
                    .withRestoreTimestampInUtc(OffsetDateTime.parse("2022-07-20T18:28:00Z")))
                .withCreateMode(CreateMode.RESTORE))
            .withTags(mapOf()).withOptions(new CreateUpdateOptions()).create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
