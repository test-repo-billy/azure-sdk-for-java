// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventhubs.generated.generated;

import com.azure.resourcemanager.eventhubs.generated.models.CaptureDescription;
import com.azure.resourcemanager.eventhubs.generated.models.CaptureIdentity;
import com.azure.resourcemanager.eventhubs.generated.models.CaptureIdentityType;
import com.azure.resourcemanager.eventhubs.generated.models.CleanupPolicyRetentionDescription;
import com.azure.resourcemanager.eventhubs.generated.models.Destination;
import com.azure.resourcemanager.eventhubs.generated.models.EncodingCaptureDescription;
import com.azure.resourcemanager.eventhubs.generated.models.EntityStatus;
import com.azure.resourcemanager.eventhubs.generated.models.RetentionDescription;
import com.azure.resourcemanager.eventhubs.generated.models.TimestampType;

/**
 * Samples for EventHubs CreateOrUpdate.
 */
public final class EventHubsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/eventhub/resource-manager/Microsoft.EventHub/preview/2024-05-01-preview/examples/EventHubs/EHEventHubWithDeletePolicyCreate.json
     */
    /**
     * Sample code: EHEventHubWithDeletePolicyCreate.
     * 
     * @param manager Entry point to EventHubsManager.
     */
    public static void
        eHEventHubWithDeletePolicyCreate(com.azure.resourcemanager.eventhubs.generated.EventHubsManager manager) {
        manager.eventHubs()
            .define("sdk-EventHub-6547")
            .withExistingNamespace("Default-NotificationHubs-AustraliaEast", "sdk-Namespace-5357")
            .withMessageRetentionInDays(4L)
            .withPartitionCount(4L)
            .withStatus(EntityStatus.ACTIVE)
            .withCaptureDescription(new CaptureDescription().withEnabled(true)
                .withEncoding(EncodingCaptureDescription.AVRO)
                .withIntervalInSeconds(120)
                .withSizeLimitInBytes(10485763)
                .withDestination(new Destination().withName("EventHubArchive.AzureBlockBlob")
                    .withIdentity(new CaptureIdentity().withType(CaptureIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentity(
                            "/subscriptions/SampleSubscription/resourceGroups/ResurceGroupSample/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ud2"))
                    .withStorageAccountResourceId(
                        "/subscriptions/e2f361f0-3b27-4503-a9cc-21cfba380093/resourceGroups/Default-Storage-SouthCentralUS/providers/Microsoft.ClassicStorage/storageAccounts/arjunteststorage")
                    .withBlobContainer("container")
                    .withArchiveNameFormat(
                        "{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}")))
            .withRetentionDescription(
                new RetentionDescription().withCleanupPolicy(CleanupPolicyRetentionDescription.DELETE)
                    .withRetentionTimeInHours(24L))
            .withMessageTimestampType(TimestampType.APPEND_TIME)
            .withUserMetadata("key")
            .create();
    }

    /*
     * x-ms-original-file: specification/eventhub/resource-manager/Microsoft.EventHub/preview/2024-05-01-preview/examples/EventHubs/EHEventHubWithCompactPolicyCreate.json
     */
    /**
     * Sample code: EHEventHubWithCompactPolicyCreate.
     * 
     * @param manager Entry point to EventHubsManager.
     */
    public static void
        eHEventHubWithCompactPolicyCreate(com.azure.resourcemanager.eventhubs.generated.EventHubsManager manager) {
        manager.eventHubs()
            .define("sdk-EventHub-6547")
            .withExistingNamespace("Default-NotificationHubs-AustraliaEast", "sdk-Namespace-5357")
            .withMessageRetentionInDays(4L)
            .withPartitionCount(4L)
            .withStatus(EntityStatus.ACTIVE)
            .withCaptureDescription(new CaptureDescription().withEnabled(true)
                .withEncoding(EncodingCaptureDescription.AVRO)
                .withIntervalInSeconds(120)
                .withSizeLimitInBytes(10485763)
                .withDestination(new Destination().withName("EventHubArchive.AzureBlockBlob")
                    .withIdentity(new CaptureIdentity().withType(CaptureIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentity(
                            "/subscriptions/SampleSubscription/resourceGroups/ResurceGroupSample/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ud2"))
                    .withStorageAccountResourceId(
                        "/subscriptions/e2f361f0-3b27-4503-a9cc-21cfba380093/resourceGroups/Default-Storage-SouthCentralUS/providers/Microsoft.ClassicStorage/storageAccounts/arjunteststorage")
                    .withBlobContainer("container")
                    .withArchiveNameFormat(
                        "{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}")))
            .withRetentionDescription(
                new RetentionDescription().withCleanupPolicy(CleanupPolicyRetentionDescription.COMPACT)
                    .withRetentionTimeInHours(-1L)
                    .withMinCompactionLagInMins(10L)
                    .withTombstoneRetentionTimeInHours(1))
            .withMessageTimestampType(TimestampType.APPEND_TIME)
            .withUserMetadata("key")
            .create();
    }

    /*
     * x-ms-original-file: specification/eventhub/resource-manager/Microsoft.EventHub/preview/2024-05-01-preview/examples/EventHubs/EHEventHubCreate.json
     */
    /**
     * Sample code: EventHubCreate.
     * 
     * @param manager Entry point to EventHubsManager.
     */
    public static void eventHubCreate(com.azure.resourcemanager.eventhubs.generated.EventHubsManager manager) {
        manager.eventHubs()
            .define("sdk-EventHub-6547")
            .withExistingNamespace("Default-NotificationHubs-AustraliaEast", "sdk-Namespace-5357")
            .withMessageRetentionInDays(4L)
            .withPartitionCount(4L)
            .withStatus(EntityStatus.ACTIVE)
            .withCaptureDescription(new CaptureDescription().withEnabled(true)
                .withEncoding(EncodingCaptureDescription.AVRO)
                .withIntervalInSeconds(120)
                .withSizeLimitInBytes(10485763)
                .withDestination(new Destination().withName("EventHubArchive.AzureBlockBlob")
                    .withIdentity(new CaptureIdentity().withType(CaptureIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentity(
                            "/subscriptions/SampleSubscription/resourceGroups/ResurceGroupSample/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ud2"))
                    .withStorageAccountResourceId(
                        "/subscriptions/e2f361f0-3b27-4503-a9cc-21cfba380093/resourceGroups/Default-Storage-SouthCentralUS/providers/Microsoft.ClassicStorage/storageAccounts/arjunteststorage")
                    .withBlobContainer("container")
                    .withArchiveNameFormat(
                        "{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}")))
            .withRetentionDescription(
                new RetentionDescription().withCleanupPolicy(CleanupPolicyRetentionDescription.DELETE_COMPACT)
                    .withRetentionTimeInHours(24L))
            .withMessageTimestampType(TimestampType.APPEND_TIME)
            .withUserMetadata("key")
            .create();
    }
}
