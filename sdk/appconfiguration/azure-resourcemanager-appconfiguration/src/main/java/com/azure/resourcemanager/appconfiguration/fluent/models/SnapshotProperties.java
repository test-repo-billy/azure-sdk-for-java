// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appconfiguration.models.CompositionType;
import com.azure.resourcemanager.appconfiguration.models.KeyValueFilter;
import com.azure.resourcemanager.appconfiguration.models.ProvisioningState;
import com.azure.resourcemanager.appconfiguration.models.SnapshotStatus;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * All snapshot properties.
 */
@Fluent
public final class SnapshotProperties {
    /*
     * The provisioning state of the snapshot.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The current status of the snapshot.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private SnapshotStatus status;

    /*
     * A list of filters used to filter the key-values included in the snapshot.
     */
    @JsonProperty(value = "filters", required = true)
    private List<KeyValueFilter> filters;

    /*
     * The composition type describes how the key-values within the snapshot are composed. The 'key' composition type
     * ensures there are no two key-values containing the same key. The 'key_label' composition type ensures there are
     * no two key-values containing the same key and label.
     */
    @JsonProperty(value = "compositionType")
    private CompositionType compositionType;

    /*
     * The time that the snapshot was created.
     */
    @JsonProperty(value = "created", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime created;

    /*
     * The time that the snapshot will expire.
     */
    @JsonProperty(value = "expires", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime expires;

    /*
     * The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This property
     * is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value
     * revisions will be used.
     */
    @JsonProperty(value = "retentionPeriod")
    private Long retentionPeriod;

    /*
     * The size in bytes of the snapshot.
     */
    @JsonProperty(value = "size", access = JsonProperty.Access.WRITE_ONLY)
    private Long size;

    /*
     * The amount of key-values in the snapshot.
     */
    @JsonProperty(value = "itemsCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long itemsCount;

    /*
     * The tags of the snapshot. NOTE: These are data plane tags, not ARM tags.
     */
    @JsonProperty(value = "tags")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /*
     * A value representing the current state of the snapshot.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /**
     * Creates an instance of SnapshotProperties class.
     */
    public SnapshotProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the snapshot.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: The current status of the snapshot.
     * 
     * @return the status value.
     */
    public SnapshotStatus status() {
        return this.status;
    }

    /**
     * Get the filters property: A list of filters used to filter the key-values included in the snapshot.
     * 
     * @return the filters value.
     */
    public List<KeyValueFilter> filters() {
        return this.filters;
    }

    /**
     * Set the filters property: A list of filters used to filter the key-values included in the snapshot.
     * 
     * @param filters the filters value to set.
     * @return the SnapshotProperties object itself.
     */
    public SnapshotProperties withFilters(List<KeyValueFilter> filters) {
        this.filters = filters;
        return this;
    }

    /**
     * Get the compositionType property: The composition type describes how the key-values within the snapshot are
     * composed. The 'key' composition type ensures there are no two key-values containing the same key. The
     * 'key_label' composition type ensures there are no two key-values containing the same key and label.
     * 
     * @return the compositionType value.
     */
    public CompositionType compositionType() {
        return this.compositionType;
    }

    /**
     * Set the compositionType property: The composition type describes how the key-values within the snapshot are
     * composed. The 'key' composition type ensures there are no two key-values containing the same key. The
     * 'key_label' composition type ensures there are no two key-values containing the same key and label.
     * 
     * @param compositionType the compositionType value to set.
     * @return the SnapshotProperties object itself.
     */
    public SnapshotProperties withCompositionType(CompositionType compositionType) {
        this.compositionType = compositionType;
        return this;
    }

    /**
     * Get the created property: The time that the snapshot was created.
     * 
     * @return the created value.
     */
    public OffsetDateTime created() {
        return this.created;
    }

    /**
     * Get the expires property: The time that the snapshot will expire.
     * 
     * @return the expires value.
     */
    public OffsetDateTime expires() {
        return this.expires;
    }

    /**
     * Get the retentionPeriod property: The amount of time, in seconds, that a snapshot will remain in the archived
     * state before expiring. This property is only writable during the creation of a snapshot. If not specified, the
     * default lifetime of key-value revisions will be used.
     * 
     * @return the retentionPeriod value.
     */
    public Long retentionPeriod() {
        return this.retentionPeriod;
    }

    /**
     * Set the retentionPeriod property: The amount of time, in seconds, that a snapshot will remain in the archived
     * state before expiring. This property is only writable during the creation of a snapshot. If not specified, the
     * default lifetime of key-value revisions will be used.
     * 
     * @param retentionPeriod the retentionPeriod value to set.
     * @return the SnapshotProperties object itself.
     */
    public SnapshotProperties withRetentionPeriod(Long retentionPeriod) {
        this.retentionPeriod = retentionPeriod;
        return this;
    }

    /**
     * Get the size property: The size in bytes of the snapshot.
     * 
     * @return the size value.
     */
    public Long size() {
        return this.size;
    }

    /**
     * Get the itemsCount property: The amount of key-values in the snapshot.
     * 
     * @return the itemsCount value.
     */
    public Long itemsCount() {
        return this.itemsCount;
    }

    /**
     * Get the tags property: The tags of the snapshot. NOTE: These are data plane tags, not ARM tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags of the snapshot. NOTE: These are data plane tags, not ARM tags.
     * 
     * @param tags the tags value to set.
     * @return the SnapshotProperties object itself.
     */
    public SnapshotProperties withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the etag property: A value representing the current state of the snapshot.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filters() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property filters in model SnapshotProperties"));
        } else {
            filters().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SnapshotProperties.class);
}
