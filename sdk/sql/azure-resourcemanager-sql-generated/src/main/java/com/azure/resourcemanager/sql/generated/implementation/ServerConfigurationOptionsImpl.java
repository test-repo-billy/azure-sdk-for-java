// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.ServerConfigurationOptionsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ServerConfigurationOptionInner;
import com.azure.resourcemanager.sql.generated.models.ServerConfigurationOption;
import com.azure.resourcemanager.sql.generated.models.ServerConfigurationOptionName;
import com.azure.resourcemanager.sql.generated.models.ServerConfigurationOptions;

public final class ServerConfigurationOptionsImpl implements ServerConfigurationOptions {
    private static final ClientLogger LOGGER = new ClientLogger(ServerConfigurationOptionsImpl.class);

    private final ServerConfigurationOptionsClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public ServerConfigurationOptionsImpl(ServerConfigurationOptionsClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ServerConfigurationOption> listByManagedInstance(String resourceGroupName,
        String managedInstanceName) {
        PagedIterable<ServerConfigurationOptionInner> inner
            = this.serviceClient().listByManagedInstance(resourceGroupName, managedInstanceName);
        return Utils.mapPage(inner, inner1 -> new ServerConfigurationOptionImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerConfigurationOption> listByManagedInstance(String resourceGroupName,
        String managedInstanceName, Context context) {
        PagedIterable<ServerConfigurationOptionInner> inner
            = this.serviceClient().listByManagedInstance(resourceGroupName, managedInstanceName, context);
        return Utils.mapPage(inner, inner1 -> new ServerConfigurationOptionImpl(inner1, this.manager()));
    }

    public Response<ServerConfigurationOption> getWithResponse(String resourceGroupName, String managedInstanceName,
        ServerConfigurationOptionName serverConfigurationOptionName, Context context) {
        Response<ServerConfigurationOptionInner> inner = this.serviceClient().getWithResponse(resourceGroupName,
            managedInstanceName, serverConfigurationOptionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ServerConfigurationOptionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ServerConfigurationOption get(String resourceGroupName, String managedInstanceName,
        ServerConfigurationOptionName serverConfigurationOptionName) {
        ServerConfigurationOptionInner inner
            = this.serviceClient().get(resourceGroupName, managedInstanceName, serverConfigurationOptionName);
        if (inner != null) {
            return new ServerConfigurationOptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ServerConfigurationOption getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String serverConfigurationOptionNameLocal = Utils.getValueFromIdByName(id, "serverConfigurationOptions");
        if (serverConfigurationOptionNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'serverConfigurationOptions'.", id)));
        }
        ServerConfigurationOptionName serverConfigurationOptionName
            = ServerConfigurationOptionName.fromString(serverConfigurationOptionNameLocal);
        return this.getWithResponse(resourceGroupName, managedInstanceName, serverConfigurationOptionName, Context.NONE)
            .getValue();
    }

    public Response<ServerConfigurationOption> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String serverConfigurationOptionNameLocal = Utils.getValueFromIdByName(id, "serverConfigurationOptions");
        if (serverConfigurationOptionNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'serverConfigurationOptions'.", id)));
        }
        ServerConfigurationOptionName serverConfigurationOptionName
            = ServerConfigurationOptionName.fromString(serverConfigurationOptionNameLocal);
        return this.getWithResponse(resourceGroupName, managedInstanceName, serverConfigurationOptionName, context);
    }

    private ServerConfigurationOptionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public ServerConfigurationOptionImpl define(ServerConfigurationOptionName name) {
        return new ServerConfigurationOptionImpl(name, this.manager());
    }
}
