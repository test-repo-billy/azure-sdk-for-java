// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.StartStopManagedInstanceSchedulesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.StartStopManagedInstanceScheduleInner;
import com.azure.resourcemanager.sql.generated.models.StartStopManagedInstanceSchedule;
import com.azure.resourcemanager.sql.generated.models.StartStopManagedInstanceSchedules;
import com.azure.resourcemanager.sql.generated.models.StartStopScheduleName;

public final class StartStopManagedInstanceSchedulesImpl implements StartStopManagedInstanceSchedules {
    private static final ClientLogger LOGGER = new ClientLogger(StartStopManagedInstanceSchedulesImpl.class);

    private final StartStopManagedInstanceSchedulesClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public StartStopManagedInstanceSchedulesImpl(StartStopManagedInstanceSchedulesClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<StartStopManagedInstanceSchedule> listByInstance(String resourceGroupName,
        String managedInstanceName) {
        PagedIterable<StartStopManagedInstanceScheduleInner> inner
            = this.serviceClient().listByInstance(resourceGroupName, managedInstanceName);
        return Utils.mapPage(inner, inner1 -> new StartStopManagedInstanceScheduleImpl(inner1, this.manager()));
    }

    public PagedIterable<StartStopManagedInstanceSchedule> listByInstance(String resourceGroupName,
        String managedInstanceName, Context context) {
        PagedIterable<StartStopManagedInstanceScheduleInner> inner
            = this.serviceClient().listByInstance(resourceGroupName, managedInstanceName, context);
        return Utils.mapPage(inner, inner1 -> new StartStopManagedInstanceScheduleImpl(inner1, this.manager()));
    }

    public Response<StartStopManagedInstanceSchedule> getWithResponse(String resourceGroupName,
        String managedInstanceName, StartStopScheduleName startStopScheduleName, Context context) {
        Response<StartStopManagedInstanceScheduleInner> inner = this.serviceClient().getWithResponse(resourceGroupName,
            managedInstanceName, startStopScheduleName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StartStopManagedInstanceScheduleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StartStopManagedInstanceSchedule get(String resourceGroupName, String managedInstanceName,
        StartStopScheduleName startStopScheduleName) {
        StartStopManagedInstanceScheduleInner inner
            = this.serviceClient().get(resourceGroupName, managedInstanceName, startStopScheduleName);
        if (inner != null) {
            return new StartStopManagedInstanceScheduleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String managedInstanceName,
        StartStopScheduleName startStopScheduleName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, managedInstanceName, startStopScheduleName,
            context);
    }

    public void delete(String resourceGroupName, String managedInstanceName,
        StartStopScheduleName startStopScheduleName) {
        this.serviceClient().delete(resourceGroupName, managedInstanceName, startStopScheduleName);
    }

    public StartStopManagedInstanceSchedule getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String startStopScheduleNameLocal = Utils.getValueFromIdByName(id, "startStopSchedules");
        if (startStopScheduleNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'startStopSchedules'.", id)));
        }
        StartStopScheduleName startStopScheduleName = StartStopScheduleName.fromString(startStopScheduleNameLocal);
        return this.getWithResponse(resourceGroupName, managedInstanceName, startStopScheduleName, Context.NONE)
            .getValue();
    }

    public Response<StartStopManagedInstanceSchedule> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String startStopScheduleNameLocal = Utils.getValueFromIdByName(id, "startStopSchedules");
        if (startStopScheduleNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'startStopSchedules'.", id)));
        }
        StartStopScheduleName startStopScheduleName = StartStopScheduleName.fromString(startStopScheduleNameLocal);
        return this.getWithResponse(resourceGroupName, managedInstanceName, startStopScheduleName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String startStopScheduleNameLocal = Utils.getValueFromIdByName(id, "startStopSchedules");
        if (startStopScheduleNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'startStopSchedules'.", id)));
        }
        StartStopScheduleName startStopScheduleName = StartStopScheduleName.fromString(startStopScheduleNameLocal);
        this.deleteWithResponse(resourceGroupName, managedInstanceName, startStopScheduleName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String startStopScheduleNameLocal = Utils.getValueFromIdByName(id, "startStopSchedules");
        if (startStopScheduleNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'startStopSchedules'.", id)));
        }
        StartStopScheduleName startStopScheduleName = StartStopScheduleName.fromString(startStopScheduleNameLocal);
        return this.deleteWithResponse(resourceGroupName, managedInstanceName, startStopScheduleName, context);
    }

    private StartStopManagedInstanceSchedulesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public StartStopManagedInstanceScheduleImpl define(StartStopScheduleName name) {
        return new StartStopManagedInstanceScheduleImpl(name, this.manager());
    }
}
