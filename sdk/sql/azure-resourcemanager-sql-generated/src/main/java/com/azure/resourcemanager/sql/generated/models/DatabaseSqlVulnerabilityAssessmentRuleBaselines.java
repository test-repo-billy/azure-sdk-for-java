// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of DatabaseSqlVulnerabilityAssessmentRuleBaselines.
 */
public interface DatabaseSqlVulnerabilityAssessmentRuleBaselines {
    /**
     * Gets a list of database's sql vulnerability assessment rule baselines.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of database's sql vulnerability assessment rule baselines as paginated response with
     * {@link PagedIterable}.
     */
    PagedIterable<DatabaseSqlVulnerabilityAssessmentRuleBaseline> listByBaseline(String resourceGroupName,
        String serverName, String databaseName, VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName);

    /**
     * Gets a list of database's sql vulnerability assessment rule baselines.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of database's sql vulnerability assessment rule baselines as paginated response with
     * {@link PagedIterable}.
     */
    PagedIterable<DatabaseSqlVulnerabilityAssessmentRuleBaseline> listByBaseline(String resourceGroupName,
        String serverName, String databaseName, VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName, Context context);

    /**
     * Gets a database's sql vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database's sql vulnerability assessment rule baseline along with {@link Response}.
     */
    Response<DatabaseSqlVulnerabilityAssessmentRuleBaseline> getWithResponse(String resourceGroupName,
        String serverName, String databaseName, VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName, String ruleId, Context context);

    /**
     * Gets a database's sql vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database's sql vulnerability assessment rule baseline.
     */
    DatabaseSqlVulnerabilityAssessmentRuleBaseline get(String resourceGroupName, String serverName, String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName, BaselineName baselineName, String ruleId);

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @param parameters The requested rule baseline resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database sql vulnerability assessment rule baseline along with {@link Response}.
     */
    Response<DatabaseSqlVulnerabilityAssessmentRuleBaseline> createOrUpdateWithResponse(String resourceGroupName,
        String serverName, String databaseName, VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName, String ruleId, DatabaseSqlVulnerabilityAssessmentRuleBaselineInput parameters,
        Context context);

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @param parameters The requested rule baseline resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database sql vulnerability assessment rule baseline.
     */
    DatabaseSqlVulnerabilityAssessmentRuleBaseline createOrUpdate(String resourceGroupName, String serverName,
        String databaseName, VulnerabilityAssessmentName vulnerabilityAssessmentName, BaselineName baselineName,
        String ruleId, DatabaseSqlVulnerabilityAssessmentRuleBaselineInput parameters);

    /**
     * Removes the database's vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String resourceGroupName, String serverName, String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName, BaselineName baselineName, String ruleId,
        Context context);

    /**
     * Removes the database's vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String serverName, String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName, BaselineName baselineName, String ruleId);
}
