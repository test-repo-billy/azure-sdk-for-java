// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.JobPrivateEndpointsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.JobPrivateEndpointInner;
import com.azure.resourcemanager.sql.generated.models.JobPrivateEndpoint;
import com.azure.resourcemanager.sql.generated.models.JobPrivateEndpoints;

public final class JobPrivateEndpointsImpl implements JobPrivateEndpoints {
    private static final ClientLogger LOGGER = new ClientLogger(JobPrivateEndpointsImpl.class);

    private final JobPrivateEndpointsClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public JobPrivateEndpointsImpl(JobPrivateEndpointsClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<JobPrivateEndpoint> listByAgent(String resourceGroupName, String serverName,
        String jobAgentName) {
        PagedIterable<JobPrivateEndpointInner> inner
            = this.serviceClient().listByAgent(resourceGroupName, serverName, jobAgentName);
        return Utils.mapPage(inner, inner1 -> new JobPrivateEndpointImpl(inner1, this.manager()));
    }

    public PagedIterable<JobPrivateEndpoint> listByAgent(String resourceGroupName, String serverName,
        String jobAgentName, Context context) {
        PagedIterable<JobPrivateEndpointInner> inner
            = this.serviceClient().listByAgent(resourceGroupName, serverName, jobAgentName, context);
        return Utils.mapPage(inner, inner1 -> new JobPrivateEndpointImpl(inner1, this.manager()));
    }

    public Response<JobPrivateEndpoint> getWithResponse(String resourceGroupName, String serverName,
        String jobAgentName, String privateEndpointName, Context context) {
        Response<JobPrivateEndpointInner> inner = this.serviceClient().getWithResponse(resourceGroupName, serverName,
            jobAgentName, privateEndpointName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new JobPrivateEndpointImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public JobPrivateEndpoint get(String resourceGroupName, String serverName, String jobAgentName,
        String privateEndpointName) {
        JobPrivateEndpointInner inner
            = this.serviceClient().get(resourceGroupName, serverName, jobAgentName, privateEndpointName);
        if (inner != null) {
            return new JobPrivateEndpointImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serverName, String jobAgentName, String privateEndpointName) {
        this.serviceClient().delete(resourceGroupName, serverName, jobAgentName, privateEndpointName);
    }

    public void delete(String resourceGroupName, String serverName, String jobAgentName, String privateEndpointName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, serverName, jobAgentName, privateEndpointName, context);
    }

    public JobPrivateEndpoint getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String jobAgentName = Utils.getValueFromIdByName(id, "jobAgents");
        if (jobAgentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'jobAgents'.", id)));
        }
        String privateEndpointName = Utils.getValueFromIdByName(id, "privateEndpoints");
        if (privateEndpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateEndpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, jobAgentName, privateEndpointName, Context.NONE)
            .getValue();
    }

    public Response<JobPrivateEndpoint> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String jobAgentName = Utils.getValueFromIdByName(id, "jobAgents");
        if (jobAgentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'jobAgents'.", id)));
        }
        String privateEndpointName = Utils.getValueFromIdByName(id, "privateEndpoints");
        if (privateEndpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateEndpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, jobAgentName, privateEndpointName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String jobAgentName = Utils.getValueFromIdByName(id, "jobAgents");
        if (jobAgentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'jobAgents'.", id)));
        }
        String privateEndpointName = Utils.getValueFromIdByName(id, "privateEndpoints");
        if (privateEndpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateEndpoints'.", id)));
        }
        this.delete(resourceGroupName, serverName, jobAgentName, privateEndpointName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String jobAgentName = Utils.getValueFromIdByName(id, "jobAgents");
        if (jobAgentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'jobAgents'.", id)));
        }
        String privateEndpointName = Utils.getValueFromIdByName(id, "privateEndpoints");
        if (privateEndpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateEndpoints'.", id)));
        }
        this.delete(resourceGroupName, serverName, jobAgentName, privateEndpointName, context);
    }

    private JobPrivateEndpointsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public JobPrivateEndpointImpl define(String name) {
        return new JobPrivateEndpointImpl(name, this.manager());
    }
}
