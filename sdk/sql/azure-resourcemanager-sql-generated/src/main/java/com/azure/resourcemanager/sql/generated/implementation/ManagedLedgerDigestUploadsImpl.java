// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.ManagedLedgerDigestUploadsInner;
import com.azure.resourcemanager.sql.generated.models.ManagedLedgerDigestUploads;
import com.azure.resourcemanager.sql.generated.models.ManagedLedgerDigestUploadsName;
import com.azure.resourcemanager.sql.generated.models.ManagedLedgerDigestUploadsState;

public final class ManagedLedgerDigestUploadsImpl
    implements ManagedLedgerDigestUploads, ManagedLedgerDigestUploads.Definition, ManagedLedgerDigestUploads.Update {
    private ManagedLedgerDigestUploadsInner innerObject;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String digestStorageEndpoint() {
        return this.innerModel().digestStorageEndpoint();
    }

    public ManagedLedgerDigestUploadsState state() {
        return this.innerModel().state();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ManagedLedgerDigestUploadsInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String managedInstanceName;

    private String databaseName;

    private ManagedLedgerDigestUploadsName ledgerDigestUploads;

    public ManagedLedgerDigestUploadsImpl withExistingDatabase(String resourceGroupName, String managedInstanceName,
        String databaseName) {
        this.resourceGroupName = resourceGroupName;
        this.managedInstanceName = managedInstanceName;
        this.databaseName = databaseName;
        return this;
    }

    public ManagedLedgerDigestUploads create() {
        this.innerObject = serviceManager.serviceClient().getManagedLedgerDigestUploadsOperations().createOrUpdate(
            resourceGroupName, managedInstanceName, databaseName, ledgerDigestUploads, this.innerModel(), Context.NONE);
        return this;
    }

    public ManagedLedgerDigestUploads create(Context context) {
        this.innerObject = serviceManager.serviceClient().getManagedLedgerDigestUploadsOperations().createOrUpdate(
            resourceGroupName, managedInstanceName, databaseName, ledgerDigestUploads, this.innerModel(), context);
        return this;
    }

    ManagedLedgerDigestUploadsImpl(ManagedLedgerDigestUploadsName name,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerObject = new ManagedLedgerDigestUploadsInner();
        this.serviceManager = serviceManager;
        this.ledgerDigestUploads = name;
    }

    public ManagedLedgerDigestUploadsImpl update() {
        return this;
    }

    public ManagedLedgerDigestUploads apply() {
        this.innerObject = serviceManager.serviceClient().getManagedLedgerDigestUploadsOperations().createOrUpdate(
            resourceGroupName, managedInstanceName, databaseName, ledgerDigestUploads, this.innerModel(), Context.NONE);
        return this;
    }

    public ManagedLedgerDigestUploads apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getManagedLedgerDigestUploadsOperations().createOrUpdate(
            resourceGroupName, managedInstanceName, databaseName, ledgerDigestUploads, this.innerModel(), context);
        return this;
    }

    ManagedLedgerDigestUploadsImpl(ManagedLedgerDigestUploadsInner innerObject,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.managedInstanceName = Utils.getValueFromIdByName(innerObject.id(), "managedInstances");
        this.databaseName = Utils.getValueFromIdByName(innerObject.id(), "databases");
        this.ledgerDigestUploads = ManagedLedgerDigestUploadsName
            .fromString(Utils.getValueFromIdByName(innerObject.id(), "ledgerDigestUploads"));
    }

    public ManagedLedgerDigestUploads refresh() {
        this.innerObject = serviceManager.serviceClient().getManagedLedgerDigestUploadsOperations()
            .getWithResponse(resourceGroupName, managedInstanceName, databaseName, ledgerDigestUploads, Context.NONE)
            .getValue();
        return this;
    }

    public ManagedLedgerDigestUploads refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getManagedLedgerDigestUploadsOperations()
            .getWithResponse(resourceGroupName, managedInstanceName, databaseName, ledgerDigestUploads, context)
            .getValue();
        return this;
    }

    public ManagedLedgerDigestUploads disable() {
        return serviceManager.managedLedgerDigestUploadsOperations().disable(resourceGroupName, managedInstanceName,
            databaseName, ledgerDigestUploads);
    }

    public ManagedLedgerDigestUploads disable(Context context) {
        return serviceManager.managedLedgerDigestUploadsOperations().disable(resourceGroupName, managedInstanceName,
            databaseName, ledgerDigestUploads, context);
    }

    public ManagedLedgerDigestUploadsImpl withDigestStorageEndpoint(String digestStorageEndpoint) {
        this.innerModel().withDigestStorageEndpoint(digestStorageEndpoint);
        return this;
    }
}
