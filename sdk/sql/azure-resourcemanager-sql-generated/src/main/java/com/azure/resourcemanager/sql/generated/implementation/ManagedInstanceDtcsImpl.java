// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.ManagedInstanceDtcsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ManagedInstanceDtcInner;
import com.azure.resourcemanager.sql.generated.models.DtcName;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceDtc;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceDtcs;

public final class ManagedInstanceDtcsImpl implements ManagedInstanceDtcs {
    private static final ClientLogger LOGGER = new ClientLogger(ManagedInstanceDtcsImpl.class);

    private final ManagedInstanceDtcsClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public ManagedInstanceDtcsImpl(ManagedInstanceDtcsClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ManagedInstanceDtc> listByManagedInstance(String resourceGroupName,
        String managedInstanceName) {
        PagedIterable<ManagedInstanceDtcInner> inner
            = this.serviceClient().listByManagedInstance(resourceGroupName, managedInstanceName);
        return Utils.mapPage(inner, inner1 -> new ManagedInstanceDtcImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstanceDtc> listByManagedInstance(String resourceGroupName, String managedInstanceName,
        Context context) {
        PagedIterable<ManagedInstanceDtcInner> inner
            = this.serviceClient().listByManagedInstance(resourceGroupName, managedInstanceName, context);
        return Utils.mapPage(inner, inner1 -> new ManagedInstanceDtcImpl(inner1, this.manager()));
    }

    public Response<ManagedInstanceDtc> getWithResponse(String resourceGroupName, String managedInstanceName,
        DtcName dtcName, Context context) {
        Response<ManagedInstanceDtcInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, managedInstanceName, dtcName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ManagedInstanceDtcImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagedInstanceDtc get(String resourceGroupName, String managedInstanceName, DtcName dtcName) {
        ManagedInstanceDtcInner inner = this.serviceClient().get(resourceGroupName, managedInstanceName, dtcName);
        if (inner != null) {
            return new ManagedInstanceDtcImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ManagedInstanceDtc getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String dtcNameLocal = Utils.getValueFromIdByName(id, "dtc");
        if (dtcNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dtc'.", id)));
        }
        DtcName dtcName = DtcName.fromString(dtcNameLocal);
        return this.getWithResponse(resourceGroupName, managedInstanceName, dtcName, Context.NONE).getValue();
    }

    public Response<ManagedInstanceDtc> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String dtcNameLocal = Utils.getValueFromIdByName(id, "dtc");
        if (dtcNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dtc'.", id)));
        }
        DtcName dtcName = DtcName.fromString(dtcNameLocal);
        return this.getWithResponse(resourceGroupName, managedInstanceName, dtcName, context);
    }

    private ManagedInstanceDtcsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public ManagedInstanceDtcImpl define(DtcName name) {
        return new ManagedInstanceDtcImpl(name, this.manager());
    }
}
