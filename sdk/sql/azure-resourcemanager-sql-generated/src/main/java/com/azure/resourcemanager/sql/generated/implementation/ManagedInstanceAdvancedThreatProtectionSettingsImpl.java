// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.ManagedInstanceAdvancedThreatProtectionSettingsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ManagedInstanceAdvancedThreatProtectionInner;
import com.azure.resourcemanager.sql.generated.models.AdvancedThreatProtectionName;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceAdvancedThreatProtection;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceAdvancedThreatProtectionSettings;

public final class ManagedInstanceAdvancedThreatProtectionSettingsImpl
    implements ManagedInstanceAdvancedThreatProtectionSettings {
    private static final ClientLogger LOGGER
        = new ClientLogger(ManagedInstanceAdvancedThreatProtectionSettingsImpl.class);

    private final ManagedInstanceAdvancedThreatProtectionSettingsClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public ManagedInstanceAdvancedThreatProtectionSettingsImpl(
        ManagedInstanceAdvancedThreatProtectionSettingsClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ManagedInstanceAdvancedThreatProtection> listByInstance(String resourceGroupName,
        String managedInstanceName) {
        PagedIterable<ManagedInstanceAdvancedThreatProtectionInner> inner
            = this.serviceClient().listByInstance(resourceGroupName, managedInstanceName);
        return Utils.mapPage(inner, inner1 -> new ManagedInstanceAdvancedThreatProtectionImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstanceAdvancedThreatProtection> listByInstance(String resourceGroupName,
        String managedInstanceName, Context context) {
        PagedIterable<ManagedInstanceAdvancedThreatProtectionInner> inner
            = this.serviceClient().listByInstance(resourceGroupName, managedInstanceName, context);
        return Utils.mapPage(inner, inner1 -> new ManagedInstanceAdvancedThreatProtectionImpl(inner1, this.manager()));
    }

    public Response<ManagedInstanceAdvancedThreatProtection> getWithResponse(String resourceGroupName,
        String managedInstanceName, AdvancedThreatProtectionName advancedThreatProtectionName, Context context) {
        Response<ManagedInstanceAdvancedThreatProtectionInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, managedInstanceName, advancedThreatProtectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ManagedInstanceAdvancedThreatProtectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagedInstanceAdvancedThreatProtection get(String resourceGroupName, String managedInstanceName,
        AdvancedThreatProtectionName advancedThreatProtectionName) {
        ManagedInstanceAdvancedThreatProtectionInner inner
            = this.serviceClient().get(resourceGroupName, managedInstanceName, advancedThreatProtectionName);
        if (inner != null) {
            return new ManagedInstanceAdvancedThreatProtectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ManagedInstanceAdvancedThreatProtection getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String advancedThreatProtectionNameLocal = Utils.getValueFromIdByName(id, "advancedThreatProtectionSettings");
        if (advancedThreatProtectionNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'advancedThreatProtectionSettings'.", id)));
        }
        AdvancedThreatProtectionName advancedThreatProtectionName
            = AdvancedThreatProtectionName.fromString(advancedThreatProtectionNameLocal);
        return this.getWithResponse(resourceGroupName, managedInstanceName, advancedThreatProtectionName, Context.NONE)
            .getValue();
    }

    public Response<ManagedInstanceAdvancedThreatProtection> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String advancedThreatProtectionNameLocal = Utils.getValueFromIdByName(id, "advancedThreatProtectionSettings");
        if (advancedThreatProtectionNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'advancedThreatProtectionSettings'.", id)));
        }
        AdvancedThreatProtectionName advancedThreatProtectionName
            = AdvancedThreatProtectionName.fromString(advancedThreatProtectionNameLocal);
        return this.getWithResponse(resourceGroupName, managedInstanceName, advancedThreatProtectionName, context);
    }

    private ManagedInstanceAdvancedThreatProtectionSettingsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public ManagedInstanceAdvancedThreatProtectionImpl define(AdvancedThreatProtectionName name) {
        return new ManagedInstanceAdvancedThreatProtectionImpl(name, this.manager());
    }
}
