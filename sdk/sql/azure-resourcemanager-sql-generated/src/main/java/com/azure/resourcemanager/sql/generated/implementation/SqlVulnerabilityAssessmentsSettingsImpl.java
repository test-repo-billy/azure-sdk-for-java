// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.SqlVulnerabilityAssessmentsSettingsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.SqlVulnerabilityAssessmentInner;
import com.azure.resourcemanager.sql.generated.models.SqlVulnerabilityAssessment;
import com.azure.resourcemanager.sql.generated.models.SqlVulnerabilityAssessmentName;
import com.azure.resourcemanager.sql.generated.models.SqlVulnerabilityAssessmentsSettings;
import com.azure.resourcemanager.sql.generated.models.VulnerabilityAssessmentName;

public final class SqlVulnerabilityAssessmentsSettingsImpl implements SqlVulnerabilityAssessmentsSettings {
    private static final ClientLogger LOGGER = new ClientLogger(SqlVulnerabilityAssessmentsSettingsImpl.class);

    private final SqlVulnerabilityAssessmentsSettingsClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public SqlVulnerabilityAssessmentsSettingsImpl(SqlVulnerabilityAssessmentsSettingsClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SqlVulnerabilityAssessment> listByServer(String resourceGroupName, String serverName) {
        PagedIterable<SqlVulnerabilityAssessmentInner> inner
            = this.serviceClient().listByServer(resourceGroupName, serverName);
        return Utils.mapPage(inner, inner1 -> new SqlVulnerabilityAssessmentImpl(inner1, this.manager()));
    }

    public PagedIterable<SqlVulnerabilityAssessment> listByServer(String resourceGroupName, String serverName,
        Context context) {
        PagedIterable<SqlVulnerabilityAssessmentInner> inner
            = this.serviceClient().listByServer(resourceGroupName, serverName, context);
        return Utils.mapPage(inner, inner1 -> new SqlVulnerabilityAssessmentImpl(inner1, this.manager()));
    }

    public Response<SqlVulnerabilityAssessment> getWithResponse(String resourceGroupName, String serverName,
        SqlVulnerabilityAssessmentName vulnerabilityAssessmentName, Context context) {
        Response<SqlVulnerabilityAssessmentInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, serverName, vulnerabilityAssessmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SqlVulnerabilityAssessmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SqlVulnerabilityAssessment get(String resourceGroupName, String serverName,
        SqlVulnerabilityAssessmentName vulnerabilityAssessmentName) {
        SqlVulnerabilityAssessmentInner inner
            = this.serviceClient().get(resourceGroupName, serverName, vulnerabilityAssessmentName);
        if (inner != null) {
            return new SqlVulnerabilityAssessmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SqlVulnerabilityAssessment getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String vulnerabilityAssessmentNameLocal = Utils.getValueFromIdByName(id, "sqlVulnerabilityAssessments");
        if (vulnerabilityAssessmentNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'sqlVulnerabilityAssessments'.", id)));
        }
        SqlVulnerabilityAssessmentName vulnerabilityAssessmentName
            = SqlVulnerabilityAssessmentName.fromString(vulnerabilityAssessmentNameLocal);
        return this.getWithResponse(resourceGroupName, serverName, vulnerabilityAssessmentName, Context.NONE)
            .getValue();
    }

    public Response<SqlVulnerabilityAssessment> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String vulnerabilityAssessmentNameLocal = Utils.getValueFromIdByName(id, "sqlVulnerabilityAssessments");
        if (vulnerabilityAssessmentNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'sqlVulnerabilityAssessments'.", id)));
        }
        SqlVulnerabilityAssessmentName vulnerabilityAssessmentName
            = SqlVulnerabilityAssessmentName.fromString(vulnerabilityAssessmentNameLocal);
        return this.getWithResponse(resourceGroupName, serverName, vulnerabilityAssessmentName, context);
    }

    private SqlVulnerabilityAssessmentsSettingsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public SqlVulnerabilityAssessmentImpl define(VulnerabilityAssessmentName name) {
        return new SqlVulnerabilityAssessmentImpl(name, this.manager());
    }
}
