// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of SqlVulnerabilityAssessmentsSettings.
 */
public interface SqlVulnerabilityAssessmentsSettings {
    /**
     * Lists SQL Vulnerability Assessment policies associated with a server.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Vulnerability Assessments as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SqlVulnerabilityAssessment> listByServer(String resourceGroupName, String serverName);

    /**
     * Lists SQL Vulnerability Assessment policies associated with a server.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Vulnerability Assessments as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SqlVulnerabilityAssessment> listByServer(String resourceGroupName, String serverName,
        Context context);

    /**
     * Gets SQL Vulnerability Assessment policy.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the SQL Vulnerability Assessment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sQL Vulnerability Assessment policy along with {@link Response}.
     */
    Response<SqlVulnerabilityAssessment> getWithResponse(String resourceGroupName, String serverName,
        SqlVulnerabilityAssessmentName vulnerabilityAssessmentName, Context context);

    /**
     * Gets SQL Vulnerability Assessment policy.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the SQL Vulnerability Assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sQL Vulnerability Assessment policy.
     */
    SqlVulnerabilityAssessment get(String resourceGroupName, String serverName,
        SqlVulnerabilityAssessmentName vulnerabilityAssessmentName);

    /**
     * Gets SQL Vulnerability Assessment policy.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sQL Vulnerability Assessment policy along with {@link Response}.
     */
    SqlVulnerabilityAssessment getById(String id);

    /**
     * Gets SQL Vulnerability Assessment policy.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sQL Vulnerability Assessment policy along with {@link Response}.
     */
    Response<SqlVulnerabilityAssessment> getByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new SqlVulnerabilityAssessment resource.
     * 
     * @param name resource name.
     * @return the first stage of the new SqlVulnerabilityAssessment definition.
     */
    SqlVulnerabilityAssessment.DefinitionStages.Blank define(VulnerabilityAssessmentName name);
}
