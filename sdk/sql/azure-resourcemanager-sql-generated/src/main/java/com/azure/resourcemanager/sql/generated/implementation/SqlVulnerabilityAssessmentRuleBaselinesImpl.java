// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.SqlVulnerabilityAssessmentRuleBaselinesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseSqlVulnerabilityAssessmentRuleBaselineInner;
import com.azure.resourcemanager.sql.generated.models.BaselineName;
import com.azure.resourcemanager.sql.generated.models.DatabaseSqlVulnerabilityAssessmentRuleBaseline;
import com.azure.resourcemanager.sql.generated.models.SqlVulnerabilityAssessmentRuleBaselines;
import com.azure.resourcemanager.sql.generated.models.VulnerabilityAssessmentName;

public final class SqlVulnerabilityAssessmentRuleBaselinesImpl implements SqlVulnerabilityAssessmentRuleBaselines {
    private static final ClientLogger LOGGER = new ClientLogger(SqlVulnerabilityAssessmentRuleBaselinesImpl.class);

    private final SqlVulnerabilityAssessmentRuleBaselinesClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public SqlVulnerabilityAssessmentRuleBaselinesImpl(SqlVulnerabilityAssessmentRuleBaselinesClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DatabaseSqlVulnerabilityAssessmentRuleBaseline> listByBaseline(String resourceGroupName,
        String serverName, VulnerabilityAssessmentName vulnerabilityAssessmentName, BaselineName baselineName) {
        PagedIterable<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner> inner = this.serviceClient()
            .listByBaseline(resourceGroupName, serverName, vulnerabilityAssessmentName, baselineName);
        return Utils.mapPage(inner,
            inner1 -> new DatabaseSqlVulnerabilityAssessmentRuleBaselineImpl(inner1, this.manager()));
    }

    public PagedIterable<DatabaseSqlVulnerabilityAssessmentRuleBaseline> listByBaseline(String resourceGroupName,
        String serverName, VulnerabilityAssessmentName vulnerabilityAssessmentName, BaselineName baselineName,
        Context context) {
        PagedIterable<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner> inner = this.serviceClient()
            .listByBaseline(resourceGroupName, serverName, vulnerabilityAssessmentName, baselineName, context);
        return Utils.mapPage(inner,
            inner1 -> new DatabaseSqlVulnerabilityAssessmentRuleBaselineImpl(inner1, this.manager()));
    }

    public Response<DatabaseSqlVulnerabilityAssessmentRuleBaseline> getWithResponse(String resourceGroupName,
        String serverName, VulnerabilityAssessmentName vulnerabilityAssessmentName, BaselineName baselineName,
        String ruleId, Context context) {
        Response<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, serverName, vulnerabilityAssessmentName, baselineName, ruleId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DatabaseSqlVulnerabilityAssessmentRuleBaselineImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DatabaseSqlVulnerabilityAssessmentRuleBaseline get(String resourceGroupName, String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName, BaselineName baselineName, String ruleId) {
        DatabaseSqlVulnerabilityAssessmentRuleBaselineInner inner = this.serviceClient().get(resourceGroupName,
            serverName, vulnerabilityAssessmentName, baselineName, ruleId);
        if (inner != null) {
            return new DatabaseSqlVulnerabilityAssessmentRuleBaselineImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DatabaseSqlVulnerabilityAssessmentRuleBaseline getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String vulnerabilityAssessmentNameLocal = Utils.getValueFromIdByName(id, "sqlVulnerabilityAssessments");
        if (vulnerabilityAssessmentNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'sqlVulnerabilityAssessments'.", id)));
        }
        VulnerabilityAssessmentName vulnerabilityAssessmentName
            = VulnerabilityAssessmentName.fromString(vulnerabilityAssessmentNameLocal);
        String baselineNameLocal = Utils.getValueFromIdByName(id, "baselines");
        if (baselineNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'baselines'.", id)));
        }
        BaselineName baselineName = BaselineName.fromString(baselineNameLocal);
        String ruleId = Utils.getValueFromIdByName(id, "rules");
        if (ruleId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'rules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, vulnerabilityAssessmentName, baselineName, ruleId,
            Context.NONE).getValue();
    }

    public Response<DatabaseSqlVulnerabilityAssessmentRuleBaseline> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String vulnerabilityAssessmentNameLocal = Utils.getValueFromIdByName(id, "sqlVulnerabilityAssessments");
        if (vulnerabilityAssessmentNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'sqlVulnerabilityAssessments'.", id)));
        }
        VulnerabilityAssessmentName vulnerabilityAssessmentName
            = VulnerabilityAssessmentName.fromString(vulnerabilityAssessmentNameLocal);
        String baselineNameLocal = Utils.getValueFromIdByName(id, "baselines");
        if (baselineNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'baselines'.", id)));
        }
        BaselineName baselineName = BaselineName.fromString(baselineNameLocal);
        String ruleId = Utils.getValueFromIdByName(id, "rules");
        if (ruleId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'rules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, vulnerabilityAssessmentName, baselineName, ruleId,
            context);
    }

    private SqlVulnerabilityAssessmentRuleBaselinesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public DatabaseSqlVulnerabilityAssessmentRuleBaselineImpl define(String name) {
        return new DatabaseSqlVulnerabilityAssessmentRuleBaselineImpl(name, this.manager());
    }
}
