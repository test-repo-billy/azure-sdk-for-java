// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicelinker.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * The configuration information, used to generate configurations or save to applications.
 */
@Fluent
public final class ConfigurationInfo {
    /*
     * Indicates whether to clean up previous operation when Linker is updating or deleting
     */
    @JsonProperty(value = "deleteOrUpdateBehavior")
    private DeleteOrUpdateBehavior deleteOrUpdateBehavior;

    /*
     * Optional, indicate whether to apply configurations on source application. If enable, generate configurations and
     * applied to the source application. Default is enable. If optOut, no configuration change will be made on source.
     */
    @JsonProperty(value = "action")
    private ActionType action;

    /*
     * Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name
     * will be used for generate configurations
     */
    @JsonProperty(value = "customizedKeys")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> customizedKeys;

    /*
     * Indicates some additional properties for dapr client type
     */
    @JsonProperty(value = "daprProperties")
    private DaprProperties daprProperties;

    /*
     * A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations
     * and this property is to full fill more customized configurations
     */
    @JsonProperty(value = "additionalConfigurations")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> additionalConfigurations;

    /**
     * Creates an instance of ConfigurationInfo class.
     */
    public ConfigurationInfo() {
    }

    /**
     * Get the deleteOrUpdateBehavior property: Indicates whether to clean up previous operation when Linker is
     * updating or deleting.
     * 
     * @return the deleteOrUpdateBehavior value.
     */
    public DeleteOrUpdateBehavior deleteOrUpdateBehavior() {
        return this.deleteOrUpdateBehavior;
    }

    /**
     * Set the deleteOrUpdateBehavior property: Indicates whether to clean up previous operation when Linker is
     * updating or deleting.
     * 
     * @param deleteOrUpdateBehavior the deleteOrUpdateBehavior value to set.
     * @return the ConfigurationInfo object itself.
     */
    public ConfigurationInfo withDeleteOrUpdateBehavior(DeleteOrUpdateBehavior deleteOrUpdateBehavior) {
        this.deleteOrUpdateBehavior = deleteOrUpdateBehavior;
        return this;
    }

    /**
     * Get the action property: Optional, indicate whether to apply configurations on source application. If enable,
     * generate configurations and applied to the source application. Default is enable. If optOut, no configuration
     * change will be made on source.
     * 
     * @return the action value.
     */
    public ActionType action() {
        return this.action;
    }

    /**
     * Set the action property: Optional, indicate whether to apply configurations on source application. If enable,
     * generate configurations and applied to the source application. Default is enable. If optOut, no configuration
     * change will be made on source.
     * 
     * @param action the action value to set.
     * @return the ConfigurationInfo object itself.
     */
    public ConfigurationInfo withAction(ActionType action) {
        this.action = action;
        return this;
    }

    /**
     * Get the customizedKeys property: Optional. A dictionary of default key name and customized key name mapping. If
     * not specified, default key name will be used for generate configurations.
     * 
     * @return the customizedKeys value.
     */
    public Map<String, String> customizedKeys() {
        return this.customizedKeys;
    }

    /**
     * Set the customizedKeys property: Optional. A dictionary of default key name and customized key name mapping. If
     * not specified, default key name will be used for generate configurations.
     * 
     * @param customizedKeys the customizedKeys value to set.
     * @return the ConfigurationInfo object itself.
     */
    public ConfigurationInfo withCustomizedKeys(Map<String, String> customizedKeys) {
        this.customizedKeys = customizedKeys;
        return this;
    }

    /**
     * Get the daprProperties property: Indicates some additional properties for dapr client type.
     * 
     * @return the daprProperties value.
     */
    public DaprProperties daprProperties() {
        return this.daprProperties;
    }

    /**
     * Set the daprProperties property: Indicates some additional properties for dapr client type.
     * 
     * @param daprProperties the daprProperties value to set.
     * @return the ConfigurationInfo object itself.
     */
    public ConfigurationInfo withDaprProperties(DaprProperties daprProperties) {
        this.daprProperties = daprProperties;
        return this;
    }

    /**
     * Get the additionalConfigurations property: A dictionary of additional configurations to be added. Service will
     * auto generate a set of basic configurations and this property is to full fill more customized configurations.
     * 
     * @return the additionalConfigurations value.
     */
    public Map<String, String> additionalConfigurations() {
        return this.additionalConfigurations;
    }

    /**
     * Set the additionalConfigurations property: A dictionary of additional configurations to be added. Service will
     * auto generate a set of basic configurations and this property is to full fill more customized configurations.
     * 
     * @param additionalConfigurations the additionalConfigurations value to set.
     * @return the ConfigurationInfo object itself.
     */
    public ConfigurationInfo withAdditionalConfigurations(Map<String, String> additionalConfigurations) {
        this.additionalConfigurations = additionalConfigurations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (daprProperties() != null) {
            daprProperties().validate();
        }
    }
}
