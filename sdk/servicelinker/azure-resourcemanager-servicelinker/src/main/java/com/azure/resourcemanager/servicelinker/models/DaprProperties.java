// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicelinker.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Indicates some additional properties for dapr client type.
 */
@Fluent
public final class DaprProperties {
    /*
     * The dapr component version
     */
    @JsonProperty(value = "version")
    private String version;

    /*
     * The dapr component type
     */
    @JsonProperty(value = "componentType")
    private String componentType;

    /*
     * The name of a secret store dapr to retrieve secret
     */
    @JsonProperty(value = "secretStoreComponent")
    private String secretStoreComponent;

    /*
     * Additional dapr metadata
     */
    @JsonProperty(value = "metadata")
    private List<DaprMetadata> metadata;

    /*
     * The dapr component scopes
     */
    @JsonProperty(value = "scopes")
    private List<String> scopes;

    /**
     * Creates an instance of DaprProperties class.
     */
    public DaprProperties() {
    }

    /**
     * Get the version property: The dapr component version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: The dapr component version.
     * 
     * @param version the version value to set.
     * @return the DaprProperties object itself.
     */
    public DaprProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the componentType property: The dapr component type.
     * 
     * @return the componentType value.
     */
    public String componentType() {
        return this.componentType;
    }

    /**
     * Set the componentType property: The dapr component type.
     * 
     * @param componentType the componentType value to set.
     * @return the DaprProperties object itself.
     */
    public DaprProperties withComponentType(String componentType) {
        this.componentType = componentType;
        return this;
    }

    /**
     * Get the secretStoreComponent property: The name of a secret store dapr to retrieve secret.
     * 
     * @return the secretStoreComponent value.
     */
    public String secretStoreComponent() {
        return this.secretStoreComponent;
    }

    /**
     * Set the secretStoreComponent property: The name of a secret store dapr to retrieve secret.
     * 
     * @param secretStoreComponent the secretStoreComponent value to set.
     * @return the DaprProperties object itself.
     */
    public DaprProperties withSecretStoreComponent(String secretStoreComponent) {
        this.secretStoreComponent = secretStoreComponent;
        return this;
    }

    /**
     * Get the metadata property: Additional dapr metadata.
     * 
     * @return the metadata value.
     */
    public List<DaprMetadata> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Additional dapr metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the DaprProperties object itself.
     */
    public DaprProperties withMetadata(List<DaprMetadata> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the scopes property: The dapr component scopes.
     * 
     * @return the scopes value.
     */
    public List<String> scopes() {
        return this.scopes;
    }

    /**
     * Set the scopes property: The dapr component scopes.
     * 
     * @param scopes the scopes value to set.
     * @return the DaprProperties object itself.
     */
    public DaprProperties withScopes(List<String> scopes) {
        this.scopes = scopes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metadata() != null) {
            metadata().forEach(e -> e.validate());
        }
    }
}
