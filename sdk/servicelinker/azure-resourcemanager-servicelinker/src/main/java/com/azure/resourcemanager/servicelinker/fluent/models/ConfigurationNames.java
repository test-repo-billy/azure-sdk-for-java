// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicelinker.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.servicelinker.models.AuthType;
import com.azure.resourcemanager.servicelinker.models.ClientType;
import com.azure.resourcemanager.servicelinker.models.ConfigurationName;
import com.azure.resourcemanager.servicelinker.models.DaprProperties;
import com.azure.resourcemanager.servicelinker.models.SecretSourceType;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The configuration names which will be set based on specific target resource, client type, auth type.
 */
@Fluent
public final class ConfigurationNames {
    /*
     * The target service provider name and resource name.
     */
    @JsonProperty(value = "targetService")
    private String targetService;

    /*
     * The client type for configuration names.
     */
    @JsonProperty(value = "clientType")
    private ClientType clientType;

    /*
     * The auth type.
     */
    @JsonProperty(value = "authType")
    private AuthType authType;

    /*
     * Indicates where the secrets in configuration from. Used when secrets are from Keyvault.
     */
    @JsonProperty(value = "secretType")
    private SecretSourceType secretType;

    /*
     * Deprecated, please use #/definitions/DaprConfigurationList instead
     */
    @JsonProperty(value = "daprProperties")
    private DaprProperties daprProperties;

    /*
     * The configuration names to be set in compute service environment.
     */
    @JsonProperty(value = "names")
    private List<ConfigurationName> names;

    /**
     * Creates an instance of ConfigurationNames class.
     */
    public ConfigurationNames() {
    }

    /**
     * Get the targetService property: The target service provider name and resource name.
     * 
     * @return the targetService value.
     */
    public String targetService() {
        return this.targetService;
    }

    /**
     * Set the targetService property: The target service provider name and resource name.
     * 
     * @param targetService the targetService value to set.
     * @return the ConfigurationNames object itself.
     */
    public ConfigurationNames withTargetService(String targetService) {
        this.targetService = targetService;
        return this;
    }

    /**
     * Get the clientType property: The client type for configuration names.
     * 
     * @return the clientType value.
     */
    public ClientType clientType() {
        return this.clientType;
    }

    /**
     * Set the clientType property: The client type for configuration names.
     * 
     * @param clientType the clientType value to set.
     * @return the ConfigurationNames object itself.
     */
    public ConfigurationNames withClientType(ClientType clientType) {
        this.clientType = clientType;
        return this;
    }

    /**
     * Get the authType property: The auth type.
     * 
     * @return the authType value.
     */
    public AuthType authType() {
        return this.authType;
    }

    /**
     * Set the authType property: The auth type.
     * 
     * @param authType the authType value to set.
     * @return the ConfigurationNames object itself.
     */
    public ConfigurationNames withAuthType(AuthType authType) {
        this.authType = authType;
        return this;
    }

    /**
     * Get the secretType property: Indicates where the secrets in configuration from. Used when secrets are from
     * Keyvault.
     * 
     * @return the secretType value.
     */
    public SecretSourceType secretType() {
        return this.secretType;
    }

    /**
     * Set the secretType property: Indicates where the secrets in configuration from. Used when secrets are from
     * Keyvault.
     * 
     * @param secretType the secretType value to set.
     * @return the ConfigurationNames object itself.
     */
    public ConfigurationNames withSecretType(SecretSourceType secretType) {
        this.secretType = secretType;
        return this;
    }

    /**
     * Get the daprProperties property: Deprecated, please use #/definitions/DaprConfigurationList instead.
     * 
     * @return the daprProperties value.
     */
    public DaprProperties daprProperties() {
        return this.daprProperties;
    }

    /**
     * Set the daprProperties property: Deprecated, please use #/definitions/DaprConfigurationList instead.
     * 
     * @param daprProperties the daprProperties value to set.
     * @return the ConfigurationNames object itself.
     */
    public ConfigurationNames withDaprProperties(DaprProperties daprProperties) {
        this.daprProperties = daprProperties;
        return this;
    }

    /**
     * Get the names property: The configuration names to be set in compute service environment.
     * 
     * @return the names value.
     */
    public List<ConfigurationName> names() {
        return this.names;
    }

    /**
     * Set the names property: The configuration names to be set in compute service environment.
     * 
     * @param names the names value to set.
     * @return the ConfigurationNames object itself.
     */
    public ConfigurationNames withNames(List<ConfigurationName> names) {
        this.names = names;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (daprProperties() != null) {
            daprProperties().validate();
        }
        if (names() != null) {
            names().forEach(e -> e.validate());
        }
    }
}
