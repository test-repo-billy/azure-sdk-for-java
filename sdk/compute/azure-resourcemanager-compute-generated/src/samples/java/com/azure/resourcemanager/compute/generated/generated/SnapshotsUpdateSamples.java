// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.generated;

import com.azure.resourcemanager.compute.generated.models.Snapshot;
import com.azure.resourcemanager.compute.generated.models.SupportedCapabilities;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Snapshots Update.
 */
public final class SnapshotsUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-04-02/examples/snapshotExamples/
     * Snapshot_Update_WithAcceleratedNetwork.json
     */
    /**
     * Sample code: Update a snapshot with accelerated networking.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void
        updateASnapshotWithAcceleratedNetworking(com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        Snapshot resource = manager.snapshots()
            .getByResourceGroupWithResponse("myResourceGroup", "mySnapshot", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update().withTags(mapOf("department", "Development", "project", "UpdateSnapshots")).withDiskSizeGB(20)
            .withSupportedCapabilities(new SupportedCapabilities().withAcceleratedNetwork(false)).apply();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-04-02/examples/snapshotExamples/
     * Snapshot_Update.json
     */
    /**
     * Sample code: Update a snapshot.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void updateASnapshot(com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        Snapshot resource = manager.snapshots()
            .getByResourceGroupWithResponse("myResourceGroup", "mySnapshot", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update().withTags(mapOf("department", "Development", "project", "UpdateSnapshots")).withDiskSizeGB(20)
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
