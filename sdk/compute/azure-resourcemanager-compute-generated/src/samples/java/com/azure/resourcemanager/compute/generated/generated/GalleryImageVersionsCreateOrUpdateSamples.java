// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.generated;

import com.azure.resourcemanager.compute.generated.models.DataDiskImageEncryption;
import com.azure.resourcemanager.compute.generated.models.EncryptionImages;
import com.azure.resourcemanager.compute.generated.models.GalleryArtifactVersionFullSource;
import com.azure.resourcemanager.compute.generated.models.GalleryDataDiskImage;
import com.azure.resourcemanager.compute.generated.models.GalleryDiskImageSource;
import com.azure.resourcemanager.compute.generated.models.GalleryImageVersionPublishingProfile;
import com.azure.resourcemanager.compute.generated.models.GalleryImageVersionSafetyProfile;
import com.azure.resourcemanager.compute.generated.models.GalleryImageVersionStorageProfile;
import com.azure.resourcemanager.compute.generated.models.GalleryImageVersionUefiSettings;
import com.azure.resourcemanager.compute.generated.models.GalleryOSDiskImage;
import com.azure.resourcemanager.compute.generated.models.HostCaching;
import com.azure.resourcemanager.compute.generated.models.ImageVersionSecurityProfile;
import com.azure.resourcemanager.compute.generated.models.OSDiskImageEncryption;
import com.azure.resourcemanager.compute.generated.models.ReplicationMode;
import com.azure.resourcemanager.compute.generated.models.StorageAccountType;
import com.azure.resourcemanager.compute.generated.models.TargetRegion;
import com.azure.resourcemanager.compute.generated.models.UefiKey;
import com.azure.resourcemanager.compute.generated.models.UefiKeySignatures;
import com.azure.resourcemanager.compute.generated.models.UefiKeyType;
import com.azure.resourcemanager.compute.generated.models.UefiSignatureTemplateName;
import java.util.Arrays;

/**
 * Samples for GalleryImageVersions CreateOrUpdate.
 */
public final class GalleryImageVersionsCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-08-03/examples/galleryExamples/
     * GalleryImageVersion_Create_WithShallowReplicationMode.json
     */
    /**
     * Sample code: Create or update a simple Gallery Image Version using shallow replication mode.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void createOrUpdateASimpleGalleryImageVersionUsingShallowReplicationMode(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        manager.galleryImageVersions().define("1.0.0").withRegion("West US")
            .withExistingImage("myResourceGroup", "myGalleryName", "myGalleryImageName")
            .withPublishingProfile(new GalleryImageVersionPublishingProfile()
                .withTargetRegions(Arrays.asList(
                    new TargetRegion().withName("West US").withRegionalReplicaCount(1).withExcludeFromLatest(false)))
                .withReplicationMode(ReplicationMode.SHALLOW))
            .withStorageProfile(
                new GalleryImageVersionStorageProfile().withSource(new GalleryArtifactVersionFullSource().withId(
                    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}")))
            .withSafetyProfile(new GalleryImageVersionSafetyProfile().withAllowDeletionOfReplicatedLocations(false))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-08-03/examples/galleryExamples/
     * GalleryImageVersion_Create_WithVHD.json
     */
    /**
     * Sample code: Create or update a simple Gallery Image Version using vhd as a source.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void createOrUpdateASimpleGalleryImageVersionUsingVhdAsASource(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        manager.galleryImageVersions().define("1.0.0").withRegion("West US")
            .withExistingImage("myResourceGroup", "myGalleryName", "myGalleryImageName")
            .withPublishingProfile(new GalleryImageVersionPublishingProfile().withTargetRegions(Arrays.asList(
                new TargetRegion().withName("West US").withRegionalReplicaCount(1).withEncryption(new EncryptionImages()
                    .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"))
                    .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet")
                        .withLun(1))))
                    .withExcludeFromLatest(false),
                new TargetRegion().withName("East US").withRegionalReplicaCount(2)
                    .withStorageAccountType(StorageAccountType.STANDARD_ZRS).withExcludeFromLatest(false))))
            .withStorageProfile(new GalleryImageVersionStorageProfile().withOsDiskImage(new GalleryOSDiskImage()
                .withHostCaching(HostCaching.READ_ONLY)
                .withSource(new GalleryDiskImageSource().withUri(
                    "https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd")
                    .withStorageAccountId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}")))
                .withDataDiskImages(Arrays.asList(new GalleryDataDiskImage().withHostCaching(HostCaching.NONE)
                    .withSource(new GalleryDiskImageSource().withUri(
                        "https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd")
                        .withStorageAccountId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"))
                    .withLun(1))))
            .withSafetyProfile(new GalleryImageVersionSafetyProfile().withAllowDeletionOfReplicatedLocations(false))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-08-03/examples/galleryExamples/
     * GalleryImageVersion_Create_WithVmAsSource.json
     */
    /**
     * Sample code: Create or update a simple Gallery Image Version using VM as source.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void createOrUpdateASimpleGalleryImageVersionUsingVMAsSource(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        manager.galleryImageVersions().define("1.0.0").withRegion("West US")
            .withExistingImage("myResourceGroup", "myGalleryName", "myGalleryImageName")
            .withPublishingProfile(new GalleryImageVersionPublishingProfile().withTargetRegions(Arrays.asList(
                new TargetRegion().withName("West US").withRegionalReplicaCount(2).withEncryption(new EncryptionImages()
                    .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"))
                    .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet")
                        .withLun(0),
                        new DataDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet")
                            .withLun(1))))
                    .withExcludeFromLatest(false),
                new TargetRegion().withName("East US").withRegionalReplicaCount(2)
                    .withStorageAccountType(StorageAccountType.STANDARD_ZRS)
                    .withEncryption(new EncryptionImages()
                        .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"))
                        .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet")
                            .withLun(0),
                            new DataDiskImageEncryption().withDiskEncryptionSetId(
                                "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet")
                                .withLun(1))))
                    .withExcludeFromLatest(false))))
            .withStorageProfile(
                new GalleryImageVersionStorageProfile().withSource(new GalleryArtifactVersionFullSource().withId(
                    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}")))
            .withSafetyProfile(new GalleryImageVersionSafetyProfile().withAllowDeletionOfReplicatedLocations(false))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-08-03/examples/galleryExamples/
     * GalleryImageVersion_Create_WithImageVersionAsSource.json
     */
    /**
     * Sample code: Create or update a simple Gallery Image Version using shared image as source.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void createOrUpdateASimpleGalleryImageVersionUsingSharedImageAsSource(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        manager.galleryImageVersions().define("1.0.0").withRegion("West US")
            .withExistingImage("myResourceGroup", "myGalleryName", "myGalleryImageName")
            .withPublishingProfile(new GalleryImageVersionPublishingProfile().withTargetRegions(Arrays.asList(
                new TargetRegion().withName("West US").withRegionalReplicaCount(1).withEncryption(new EncryptionImages()
                    .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"))
                    .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet")
                        .withLun(0),
                        new DataDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet")
                            .withLun(1))))
                    .withExcludeFromLatest(false),
                new TargetRegion().withName("East US").withRegionalReplicaCount(2)
                    .withStorageAccountType(StorageAccountType.STANDARD_ZRS)
                    .withEncryption(new EncryptionImages()
                        .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"))
                        .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet")
                            .withLun(0),
                            new DataDiskImageEncryption().withDiskEncryptionSetId(
                                "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet")
                                .withLun(1))))
                    .withExcludeFromLatest(false))))
            .withStorageProfile(
                new GalleryImageVersionStorageProfile().withSource(new GalleryArtifactVersionFullSource().withId(
                    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{versionName}")))
            .withSafetyProfile(new GalleryImageVersionSafetyProfile().withAllowDeletionOfReplicatedLocations(false))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-08-03/examples/galleryExamples/
     * GalleryImageVersion_Create_WithVHD_UefiSettings.json
     */
    /**
     * Sample code: Create or update a simple Gallery Image Version using vhd as a source with custom UEFI keys.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void createOrUpdateASimpleGalleryImageVersionUsingVhdAsASourceWithCustomUEFIKeys(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        manager.galleryImageVersions().define("1.0.0").withRegion("West US")
            .withExistingImage("myResourceGroup", "myGalleryName", "myGalleryImageName")
            .withPublishingProfile(new GalleryImageVersionPublishingProfile().withTargetRegions(Arrays.asList(
                new TargetRegion().withName("West US").withRegionalReplicaCount(1).withEncryption(new EncryptionImages()
                    .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"))
                    .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet")
                        .withLun(1))))
                    .withExcludeFromLatest(false),
                new TargetRegion().withName("East US").withRegionalReplicaCount(2)
                    .withStorageAccountType(StorageAccountType.STANDARD_ZRS).withExcludeFromLatest(false))))
            .withStorageProfile(new GalleryImageVersionStorageProfile().withOsDiskImage(new GalleryOSDiskImage()
                .withHostCaching(HostCaching.READ_ONLY)
                .withSource(new GalleryDiskImageSource().withUri(
                    "https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd")
                    .withStorageAccountId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}")))
                .withDataDiskImages(Arrays.asList(new GalleryDataDiskImage().withHostCaching(HostCaching.NONE)
                    .withSource(new GalleryDiskImageSource().withUri(
                        "https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd")
                        .withStorageAccountId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"))
                    .withLun(1))))
            .withSafetyProfile(new GalleryImageVersionSafetyProfile().withAllowDeletionOfReplicatedLocations(false))
            .withSecurityProfile(
                new ImageVersionSecurityProfile().withUefiSettings(new GalleryImageVersionUefiSettings()
                    .withSignatureTemplateNames(
                        Arrays.asList(UefiSignatureTemplateName.MICROSOFT_UEFI_CERTIFICATE_AUTHORITY_TEMPLATE))
                    .withAdditionalSignatures(new UefiKeySignatures()
                        .withKek(Arrays.asList(
                            new UefiKey().withType(UefiKeyType.SHA256).withValue(Arrays.asList("<sha256 value>"))))
                        .withDb(Arrays
                            .asList(new UefiKey().withType(UefiKeyType.X509).withValue(Arrays.asList("<x509 value>"))))
                        .withDbx(Arrays.asList(
                            new UefiKey().withType(UefiKeyType.X509).withValue(Arrays.asList("<x509 value>")))))))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-08-03/examples/galleryExamples/
     * GalleryImageVersion_Create_WithSnapshotsAsSource.json
     */
    /**
     * Sample code: Create or update a simple Gallery Image Version using mix of disks and snapshots as a source.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void createOrUpdateASimpleGalleryImageVersionUsingMixOfDisksAndSnapshotsAsASource(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        manager.galleryImageVersions().define("1.0.0").withRegion("West US")
            .withExistingImage("myResourceGroup", "myGalleryName", "myGalleryImageName")
            .withPublishingProfile(new GalleryImageVersionPublishingProfile().withTargetRegions(Arrays.asList(
                new TargetRegion().withName("West US").withRegionalReplicaCount(1).withEncryption(new EncryptionImages()
                    .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"))
                    .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet")
                        .withLun(1))))
                    .withExcludeFromLatest(false),
                new TargetRegion().withName("East US").withRegionalReplicaCount(2)
                    .withStorageAccountType(StorageAccountType.STANDARD_ZRS)
                    .withEncryption(new EncryptionImages()
                        .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"))
                        .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet")
                            .withLun(1))))
                    .withExcludeFromLatest(false))))
            .withStorageProfile(new GalleryImageVersionStorageProfile().withOsDiskImage(new GalleryOSDiskImage()
                .withHostCaching(HostCaching.READ_ONLY)
                .withSource(new GalleryDiskImageSource().withId(
                    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}")))
                .withDataDiskImages(Arrays.asList(new GalleryDataDiskImage().withHostCaching(HostCaching.NONE)
                    .withSource(new GalleryDiskImageSource().withId(
                        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"))
                    .withLun(1))))
            .withSafetyProfile(new GalleryImageVersionSafetyProfile().withAllowDeletionOfReplicatedLocations(false))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-08-03/examples/galleryExamples/
     * GalleryImageVersion_Create_WithSnapshotsAsSource.json
     */
    /**
     * Sample code: Create or update a simple Gallery Image Version using snapshots as a source.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void createOrUpdateASimpleGalleryImageVersionUsingSnapshotsAsASource(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        manager.galleryImageVersions().define("1.0.0").withRegion("West US")
            .withExistingImage("myResourceGroup", "myGalleryName", "myGalleryImageName")
            .withPublishingProfile(new GalleryImageVersionPublishingProfile().withTargetRegions(Arrays.asList(
                new TargetRegion().withName("West US").withRegionalReplicaCount(1).withEncryption(new EncryptionImages()
                    .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"))
                    .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet")
                        .withLun(1))))
                    .withExcludeFromLatest(false),
                new TargetRegion().withName("East US").withRegionalReplicaCount(2)
                    .withStorageAccountType(StorageAccountType.STANDARD_ZRS)
                    .withEncryption(new EncryptionImages()
                        .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"))
                        .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet")
                            .withLun(1))))
                    .withExcludeFromLatest(false))))
            .withStorageProfile(new GalleryImageVersionStorageProfile().withOsDiskImage(new GalleryOSDiskImage()
                .withHostCaching(HostCaching.READ_ONLY)
                .withSource(new GalleryDiskImageSource().withId(
                    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}")))
                .withDataDiskImages(Arrays.asList(new GalleryDataDiskImage().withHostCaching(HostCaching.NONE)
                    .withSource(new GalleryDiskImageSource().withId(
                        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"))
                    .withLun(1))))
            .withSafetyProfile(new GalleryImageVersionSafetyProfile().withAllowDeletionOfReplicatedLocations(false))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-08-03/examples/galleryExamples/
     * GalleryImageVersion_Create_WithTargetExtendedLocations.json
     */
    /**
     * Sample code: Create or update a simple gallery image version with target extended locations specified.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void createOrUpdateASimpleGalleryImageVersionWithTargetExtendedLocationsSpecified(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        manager.galleryImageVersions().define("1.0.0").withRegion("West US")
            .withExistingImage("myResourceGroup", "myGalleryName", "myGalleryImageName")
            .withPublishingProfile(new GalleryImageVersionPublishingProfile().withTargetRegions(Arrays.asList(
                new TargetRegion().withName("West US").withRegionalReplicaCount(1).withEncryption(new EncryptionImages()
                    .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"))
                    .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet")
                        .withLun(0),
                        new DataDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet")
                            .withLun(1))))
                    .withExcludeFromLatest(false),
                new TargetRegion().withName("East US").withRegionalReplicaCount(2)
                    .withStorageAccountType(StorageAccountType.STANDARD_ZRS)
                    .withEncryption(new EncryptionImages()
                        .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"))
                        .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet")
                            .withLun(0),
                            new DataDiskImageEncryption().withDiskEncryptionSetId(
                                "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet")
                                .withLun(1))))
                    .withExcludeFromLatest(false))))
            .withStorageProfile(
                new GalleryImageVersionStorageProfile().withSource(new GalleryArtifactVersionFullSource().withId(
                    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}")))
            .withSafetyProfile(new GalleryImageVersionSafetyProfile().withAllowDeletionOfReplicatedLocations(false))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-08-03/examples/galleryExamples/
     * GalleryImageVersion_Create_WithCommunityImageVersionAsSource.json
     */
    /**
     * Sample code: Create or update a simple Gallery Image Version using community gallery image as source.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void createOrUpdateASimpleGalleryImageVersionUsingCommunityGalleryImageAsSource(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        manager.galleryImageVersions().define("1.0.0").withRegion("West US")
            .withExistingImage("myResourceGroup", "myGalleryName", "myGalleryImageName")
            .withPublishingProfile(new GalleryImageVersionPublishingProfile().withTargetRegions(Arrays.asList(
                new TargetRegion().withName("West US").withRegionalReplicaCount(1).withEncryption(new EncryptionImages()
                    .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"))
                    .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet")
                        .withLun(0),
                        new DataDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet")
                            .withLun(1))))
                    .withExcludeFromLatest(false),
                new TargetRegion().withName("East US").withRegionalReplicaCount(2)
                    .withStorageAccountType(StorageAccountType.STANDARD_ZRS)
                    .withEncryption(new EncryptionImages()
                        .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"))
                        .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet")
                            .withLun(0),
                            new DataDiskImageEncryption().withDiskEncryptionSetId(
                                "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet")
                                .withLun(1))))
                    .withExcludeFromLatest(false))))
            .withStorageProfile(new GalleryImageVersionStorageProfile()
                .withSource(new GalleryArtifactVersionFullSource().withCommunityGalleryImageId(
                    "/communityGalleries/{communityGalleryName}/images/{communityGalleryImageName}")))
            .withSafetyProfile(new GalleryImageVersionSafetyProfile().withAllowDeletionOfReplicatedLocations(false))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-08-03/examples/galleryExamples/
     * GalleryImageVersion_Create.json
     */
    /**
     * Sample code: Create or update a simple Gallery Image Version using managed image as source.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void createOrUpdateASimpleGalleryImageVersionUsingManagedImageAsSource(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        manager.galleryImageVersions().define("1.0.0").withRegion("West US")
            .withExistingImage("myResourceGroup", "myGalleryName", "myGalleryImageName")
            .withPublishingProfile(new GalleryImageVersionPublishingProfile().withTargetRegions(Arrays.asList(
                new TargetRegion().withName("West US").withRegionalReplicaCount(1).withEncryption(new EncryptionImages()
                    .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"))
                    .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                        "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet")
                        .withLun(0),
                        new DataDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet")
                            .withLun(1))))
                    .withExcludeFromLatest(false),
                new TargetRegion().withName("East US").withRegionalReplicaCount(2)
                    .withStorageAccountType(StorageAccountType.STANDARD_ZRS)
                    .withEncryption(new EncryptionImages()
                        .withOsDiskImage(new OSDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"))
                        .withDataDiskImages(Arrays.asList(new DataDiskImageEncryption().withDiskEncryptionSetId(
                            "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet")
                            .withLun(0),
                            new DataDiskImageEncryption().withDiskEncryptionSetId(
                                "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet")
                                .withLun(1))))
                    .withExcludeFromLatest(false))))
            .withStorageProfile(
                new GalleryImageVersionStorageProfile().withSource(new GalleryArtifactVersionFullSource().withId(
                    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}")))
            .withSafetyProfile(new GalleryImageVersionSafetyProfile().withAllowDeletionOfReplicatedLocations(false))
            .create();
    }
}
