// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.generated;

import com.azure.resourcemanager.compute.generated.models.Architecture;
import com.azure.resourcemanager.compute.generated.models.Disk;
import com.azure.resourcemanager.compute.generated.models.NetworkAccessPolicy;
import com.azure.resourcemanager.compute.generated.models.PurchasePlanAutoGenerated;
import com.azure.resourcemanager.compute.generated.models.SupportedCapabilities;

/**
 * Samples for Disks Update.
 */
public final class DisksUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-10-02/examples/diskExamples/
     * Disk_Update_ToAddArchitecture.json
     */
    /**
     * Sample code: Update a managed disk to add architecture.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void
        updateAManagedDiskToAddArchitecture(com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        Disk resource = manager.disks()
            .getByResourceGroupWithResponse("myResourceGroup", "myDisk", com.azure.core.util.Context.NONE).getValue();
        resource.update().withSupportedCapabilities(new SupportedCapabilities().withArchitecture(Architecture.ARM64))
            .apply();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-10-02/examples/diskExamples/
     * Disk_Update_DisableBursting.json
     */
    /**
     * Sample code: Update a managed disk to disable bursting.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void
        updateAManagedDiskToDisableBursting(com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        Disk resource = manager.disks()
            .getByResourceGroupWithResponse("myResourceGroup", "myDisk", com.azure.core.util.Context.NONE).getValue();
        resource.update().withBurstingEnabled(false).apply();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-10-02/examples/diskExamples/
     * Disk_Update_AddPurchasePlan.json
     */
    /**
     * Sample code: Update a managed disk to add purchase plan.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void
        updateAManagedDiskToAddPurchasePlan(com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        Disk resource = manager.disks()
            .getByResourceGroupWithResponse("myResourceGroup", "myDisk", com.azure.core.util.Context.NONE).getValue();
        resource.update()
            .withPurchasePlan(
                new PurchasePlanAutoGenerated().withName("myPurchasePlanName").withPublisher("myPurchasePlanPublisher")
                    .withProduct("myPurchasePlanProduct").withPromotionCode("fakeTokenPlaceholder"))
            .apply();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-10-02/examples/diskExamples/
     * Disk_Update_ChangeTier.json
     */
    /**
     * Sample code: Update a managed disk to change tier.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void
        updateAManagedDiskToChangeTier(com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        Disk resource = manager.disks()
            .getByResourceGroupWithResponse("myResourceGroup", "myDisk", com.azure.core.util.Context.NONE).getValue();
        resource.update().withTier("P30").apply();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-10-02/examples/diskExamples/
     * Disk_CreateOrUpdate_BurstingEnabled.json
     */
    /**
     * Sample code: Create or update a bursting enabled managed disk.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void
        createOrUpdateABurstingEnabledManagedDisk(com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        Disk resource = manager.disks()
            .getByResourceGroupWithResponse("myResourceGroup", "myDisk", com.azure.core.util.Context.NONE).getValue();
        resource.update().withDiskSizeGB(1024).withBurstingEnabled(true).apply();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-10-02/examples/diskExamples/
     * Disk_Update_AddSupportsHibernation.json
     */
    /**
     * Sample code: Update a managed disk to add supportsHibernation.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void
        updateAManagedDiskToAddSupportsHibernation(com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        Disk resource = manager.disks()
            .getByResourceGroupWithResponse("myResourceGroup", "myDisk", com.azure.core.util.Context.NONE).getValue();
        resource.update().withSupportsHibernation(true).apply();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-10-02/examples/diskExamples/
     * Disk_Update_RemoveDiskAccess.json
     */
    /**
     * Sample code: Update managed disk to remove disk access resource association.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void updateManagedDiskToRemoveDiskAccessResourceAssociation(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        Disk resource = manager.disks()
            .getByResourceGroupWithResponse("myResourceGroup", "myDisk", com.azure.core.util.Context.NONE).getValue();
        resource.update().withNetworkAccessPolicy(NetworkAccessPolicy.ALLOW_ALL).apply();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-10-02/examples/diskExamples/
     * Disk_Update_AddDiskControllerTypes.json
     */
    /**
     * Sample code: Update a managed disk with diskControllerTypes.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void
        updateAManagedDiskWithDiskControllerTypes(com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        Disk resource = manager.disks()
            .getByResourceGroupWithResponse("myResourceGroup", "myDisk", com.azure.core.util.Context.NONE).getValue();
        resource.update().withSupportedCapabilities(new SupportedCapabilities().withDiskControllerTypes("SCSI"))
            .apply();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-10-02/examples/diskExamples/
     * Disk_Update_AddAcceleratedNetworking.json
     */
    /**
     * Sample code: Update a managed disk to add accelerated networking.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void updateAManagedDiskToAddAcceleratedNetworking(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        Disk resource = manager.disks()
            .getByResourceGroupWithResponse("myResourceGroup", "myDisk", com.azure.core.util.Context.NONE).getValue();
        resource.update().withSupportedCapabilities(new SupportedCapabilities().withAcceleratedNetwork(false)).apply();
    }

    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-10-02/examples/diskExamples/
     * Disk_Update_DisableOptimizedForFrequentAttach.json
     */
    /**
     * Sample code: Update a managed disk to disable optimizedForFrequentAttach.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void updateAManagedDiskToDisableOptimizedForFrequentAttach(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        Disk resource = manager.disks()
            .getByResourceGroupWithResponse("myResourceGroup", "myDisk", com.azure.core.util.Context.NONE).getValue();
        resource.update().withOptimizedForFrequentAttach(false).apply();
    }
}
