// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.generated;

import com.azure.resourcemanager.compute.generated.models.DiskEncryptionSetIdentityType;
import com.azure.resourcemanager.compute.generated.models.DiskEncryptionSetType;
import com.azure.resourcemanager.compute.generated.models.EncryptionSetIdentity;
import com.azure.resourcemanager.compute.generated.models.KeyForDiskEncryptionSet;
import com.azure.resourcemanager.compute.generated.models.SourceVault;
import com.azure.resourcemanager.compute.generated.models.UserAssignedIdentitiesValue;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for DiskEncryptionSets CreateOrUpdate.
 */
public final class DiskEncryptionSetsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-10-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Create_WithKeyVaultFromADifferentTenant.json
     */
    /**
     * Sample code: Create a disk encryption set with key vault from a different tenant.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void createADiskEncryptionSetWithKeyVaultFromADifferentTenant(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        manager.diskEncryptionSets()
            .define("myDiskEncryptionSet")
            .withRegion("West US")
            .withExistingResourceGroup("myResourceGroup")
            .withIdentity(new EncryptionSetIdentity().withType(DiskEncryptionSetIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf(
                    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}",
                    new UserAssignedIdentitiesValue())))
            .withEncryptionType(DiskEncryptionSetType.ENCRYPTION_AT_REST_WITH_CUSTOMER_KEY)
            .withActiveKey(new KeyForDiskEncryptionSet().withKeyUrl("fakeTokenPlaceholder"))
            .withFederatedClientId("00000000-0000-0000-0000-000000000000")
            .create();
    }

    /*
     * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-10-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Create.json
     */
    /**
     * Sample code: Create a disk encryption set.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void createADiskEncryptionSet(com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        manager.diskEncryptionSets()
            .define("myDiskEncryptionSet")
            .withRegion("West US")
            .withExistingResourceGroup("myResourceGroup")
            .withIdentity(new EncryptionSetIdentity().withType(DiskEncryptionSetIdentityType.SYSTEM_ASSIGNED))
            .withEncryptionType(DiskEncryptionSetType.ENCRYPTION_AT_REST_WITH_CUSTOMER_KEY)
            .withActiveKey(new KeyForDiskEncryptionSet().withSourceVault(new SourceVault().withId(
                "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"))
                .withKeyUrl("fakeTokenPlaceholder"))
            .create();
    }

    /*
     * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-10-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Create_WithKeyVaultFromADifferentSubscription.json
     */
    /**
     * Sample code: Create a disk encryption set with key vault from a different subscription.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void createADiskEncryptionSetWithKeyVaultFromADifferentSubscription(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        manager.diskEncryptionSets()
            .define("myDiskEncryptionSet")
            .withRegion("West US")
            .withExistingResourceGroup("myResourceGroup")
            .withIdentity(new EncryptionSetIdentity().withType(DiskEncryptionSetIdentityType.SYSTEM_ASSIGNED))
            .withEncryptionType(DiskEncryptionSetType.ENCRYPTION_AT_REST_WITH_CUSTOMER_KEY)
            .withActiveKey(new KeyForDiskEncryptionSet().withKeyUrl("fakeTokenPlaceholder"))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
