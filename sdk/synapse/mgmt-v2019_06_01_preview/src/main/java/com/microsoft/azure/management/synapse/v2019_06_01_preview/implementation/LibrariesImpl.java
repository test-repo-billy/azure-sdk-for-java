/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.synapse.v2019_06_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.Libraries;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.synapse.v2019_06_01_preview.LibraryResource;

class LibrariesImpl extends WrapperImpl<LibrariesInner> implements Libraries {
    private final SynapseManager manager;

    LibrariesImpl(SynapseManager manager) {
        super(manager.inner().libraries());
        this.manager = manager;
    }

    public SynapseManager manager() {
        return this.manager;
    }

    private LibraryResourceImpl wrapModel(LibraryResourceInner inner) {
        return  new LibraryResourceImpl(inner, manager());
    }

    @Override
    public Observable<LibraryResource> listByWorkspaceAsync(final String resourceGroupName, final String workspaceName) {
        LibrariesInner client = this.inner();
        return client.listByWorkspaceAsync(resourceGroupName, workspaceName)
        .flatMapIterable(new Func1<Page<LibraryResourceInner>, Iterable<LibraryResourceInner>>() {
            @Override
            public Iterable<LibraryResourceInner> call(Page<LibraryResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<LibraryResourceInner, LibraryResource>() {
            @Override
            public LibraryResource call(LibraryResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
