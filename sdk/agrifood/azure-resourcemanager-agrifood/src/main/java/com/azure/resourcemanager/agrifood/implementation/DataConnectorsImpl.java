// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.agrifood.fluent.DataConnectorsClient;
import com.azure.resourcemanager.agrifood.fluent.models.DataConnectorInner;
import com.azure.resourcemanager.agrifood.models.DataConnector;
import com.azure.resourcemanager.agrifood.models.DataConnectors;

public final class DataConnectorsImpl implements DataConnectors {
    private static final ClientLogger LOGGER = new ClientLogger(DataConnectorsImpl.class);

    private final DataConnectorsClient innerClient;

    private final com.azure.resourcemanager.agrifood.AgriFoodManager serviceManager;

    public DataConnectorsImpl(DataConnectorsClient innerClient,
        com.azure.resourcemanager.agrifood.AgriFoodManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DataConnector> getWithResponse(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String dataConnectorName, Context context) {
        Response<DataConnectorInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DataConnectorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DataConnector get(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String dataConnectorName) {
        DataConnectorInner inner
            = this.serviceClient().get(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName);
        if (inner != null) {
            return new DataConnectorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String dataConnectorName, Context context) {
        return this.serviceClient()
            .deleteWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName, context);
    }

    public void delete(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String dataConnectorName) {
        this.serviceClient().delete(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName);
    }

    public PagedIterable<DataConnector> list(String resourceGroupName, String dataManagerForAgricultureResourceName) {
        PagedIterable<DataConnectorInner> inner
            = this.serviceClient().list(resourceGroupName, dataManagerForAgricultureResourceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DataConnectorImpl(inner1, this.manager()));
    }

    public PagedIterable<DataConnector> list(String resourceGroupName, String dataManagerForAgricultureResourceName,
        Integer maxPageSize, String skipToken, Context context) {
        PagedIterable<DataConnectorInner> inner = this.serviceClient()
            .list(resourceGroupName, dataManagerForAgricultureResourceName, maxPageSize, skipToken, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DataConnectorImpl(inner1, this.manager()));
    }

    public DataConnector getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataManagerForAgricultureResourceName = ResourceManagerUtils.getValueFromIdByName(id, "farmBeats");
        if (dataManagerForAgricultureResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'farmBeats'.", id)));
        }
        String dataConnectorName = ResourceManagerUtils.getValueFromIdByName(id, "dataConnectors");
        if (dataConnectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataConnectors'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName, Context.NONE)
            .getValue();
    }

    public Response<DataConnector> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataManagerForAgricultureResourceName = ResourceManagerUtils.getValueFromIdByName(id, "farmBeats");
        if (dataManagerForAgricultureResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'farmBeats'.", id)));
        }
        String dataConnectorName = ResourceManagerUtils.getValueFromIdByName(id, "dataConnectors");
        if (dataConnectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataConnectors'.", id)));
        }
        return this.getWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName,
            context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataManagerForAgricultureResourceName = ResourceManagerUtils.getValueFromIdByName(id, "farmBeats");
        if (dataManagerForAgricultureResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'farmBeats'.", id)));
        }
        String dataConnectorName = ResourceManagerUtils.getValueFromIdByName(id, "dataConnectors");
        if (dataConnectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataConnectors'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName,
            Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataManagerForAgricultureResourceName = ResourceManagerUtils.getValueFromIdByName(id, "farmBeats");
        if (dataManagerForAgricultureResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'farmBeats'.", id)));
        }
        String dataConnectorName = ResourceManagerUtils.getValueFromIdByName(id, "dataConnectors");
        if (dataConnectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataConnectors'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName,
            context);
    }

    private DataConnectorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.agrifood.AgriFoodManager manager() {
        return this.serviceManager;
    }

    public DataConnectorImpl define(String name) {
        return new DataConnectorImpl(name, this.manager());
    }
}
