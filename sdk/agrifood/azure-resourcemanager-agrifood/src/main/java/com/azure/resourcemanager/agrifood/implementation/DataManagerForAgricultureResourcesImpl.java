// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.agrifood.fluent.DataManagerForAgricultureResourcesClient;
import com.azure.resourcemanager.agrifood.fluent.models.DataManagerForAgricultureInner;
import com.azure.resourcemanager.agrifood.models.DataManagerForAgriculture;
import com.azure.resourcemanager.agrifood.models.DataManagerForAgricultureResources;

public final class DataManagerForAgricultureResourcesImpl implements DataManagerForAgricultureResources {
    private static final ClientLogger LOGGER = new ClientLogger(DataManagerForAgricultureResourcesImpl.class);

    private final DataManagerForAgricultureResourcesClient innerClient;

    private final com.azure.resourcemanager.agrifood.AgriFoodManager serviceManager;

    public DataManagerForAgricultureResourcesImpl(DataManagerForAgricultureResourcesClient innerClient,
        com.azure.resourcemanager.agrifood.AgriFoodManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DataManagerForAgriculture> getByResourceGroupWithResponse(String resourceGroupName,
        String dataManagerForAgricultureResourceName, Context context) {
        Response<DataManagerForAgricultureInner> inner = this.serviceClient()
            .getByResourceGroupWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DataManagerForAgricultureImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DataManagerForAgriculture getByResourceGroup(String resourceGroupName,
        String dataManagerForAgricultureResourceName) {
        DataManagerForAgricultureInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, dataManagerForAgricultureResourceName);
        if (inner != null) {
            return new DataManagerForAgricultureImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName,
        String dataManagerForAgricultureResourceName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, dataManagerForAgricultureResourceName,
            context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String dataManagerForAgricultureResourceName) {
        this.serviceClient().delete(resourceGroupName, dataManagerForAgricultureResourceName);
    }

    public PagedIterable<DataManagerForAgriculture> list() {
        PagedIterable<DataManagerForAgricultureInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new DataManagerForAgricultureImpl(inner1, this.manager()));
    }

    public PagedIterable<DataManagerForAgriculture> list(Integer maxPageSize, String skipToken, Context context) {
        PagedIterable<DataManagerForAgricultureInner> inner
            = this.serviceClient().list(maxPageSize, skipToken, context);
        return Utils.mapPage(inner, inner1 -> new DataManagerForAgricultureImpl(inner1, this.manager()));
    }

    public PagedIterable<DataManagerForAgriculture> listByResourceGroup(String resourceGroupName) {
        PagedIterable<DataManagerForAgricultureInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new DataManagerForAgricultureImpl(inner1, this.manager()));
    }

    public PagedIterable<DataManagerForAgriculture> listByResourceGroup(String resourceGroupName, Integer maxPageSize,
        String skipToken, Context context) {
        PagedIterable<DataManagerForAgricultureInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, maxPageSize, skipToken, context);
        return Utils.mapPage(inner, inner1 -> new DataManagerForAgricultureImpl(inner1, this.manager()));
    }

    public DataManagerForAgriculture getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataManagerForAgricultureResourceName = Utils.getValueFromIdByName(id, "farmBeats");
        if (dataManagerForAgricultureResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'farmBeats'.", id)));
        }
        return this
            .getByResourceGroupWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, Context.NONE)
            .getValue();
    }

    public Response<DataManagerForAgriculture> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataManagerForAgricultureResourceName = Utils.getValueFromIdByName(id, "farmBeats");
        if (dataManagerForAgricultureResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'farmBeats'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataManagerForAgricultureResourceName = Utils.getValueFromIdByName(id, "farmBeats");
        if (dataManagerForAgricultureResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'farmBeats'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataManagerForAgricultureResourceName = Utils.getValueFromIdByName(id, "farmBeats");
        if (dataManagerForAgricultureResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'farmBeats'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, dataManagerForAgricultureResourceName,
            context);
    }

    private DataManagerForAgricultureResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.agrifood.AgriFoodManager manager() {
        return this.serviceManager;
    }

    public DataManagerForAgricultureImpl define(String name) {
        return new DataManagerForAgricultureImpl(name, this.manager());
    }
}
