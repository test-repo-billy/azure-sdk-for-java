// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.agrifood.fluent.DataConnectorsClient;
import com.azure.resourcemanager.agrifood.fluent.models.DataConnectorInner;
import com.azure.resourcemanager.agrifood.models.DataConnectorListResponse;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DataConnectorsClient.
 */
public final class DataConnectorsClientImpl implements DataConnectorsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DataConnectorsService service;

    /**
     * The service client containing this operation class.
     */
    private final AgriFoodManagementClientImpl client;

    /**
     * Initializes an instance of DataConnectorsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DataConnectorsClientImpl(AgriFoodManagementClientImpl client) {
        this.service
            = RestProxy.create(DataConnectorsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AgriFoodManagementClientDataConnectors to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AgriFoodManagementCl")
    public interface DataConnectorsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/dataConnectors/{dataConnectorName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataConnectorInner>> get(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("dataManagerForAgricultureResourceName") String dataManagerForAgricultureResourceName,
            @PathParam("dataConnectorName") String dataConnectorName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/dataConnectors/{dataConnectorName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataConnectorInner>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("dataManagerForAgricultureResourceName") String dataManagerForAgricultureResourceName,
            @PathParam("dataConnectorName") String dataConnectorName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DataConnectorInner body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/dataConnectors/{dataConnectorName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ManagementException.class, code = { 400 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("dataManagerForAgricultureResourceName") String dataManagerForAgricultureResourceName,
            @PathParam("dataConnectorName") String dataConnectorName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/dataConnectors")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataConnectorListResponse>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerForAgricultureResourceName") String dataManagerForAgricultureResourceName,
            @QueryParam("api-version") String apiVersion, @QueryParam("$maxPageSize") Integer maxPageSize,
            @QueryParam("$skipToken") String skipToken, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataConnectorListResponse>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get specific Data Connector resource by DataConnectorName.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specific Data Connector resource by DataConnectorName along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DataConnectorInner>> getWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String dataConnectorName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (dataConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), resourceGroupName,
                this.client.getSubscriptionId(), dataManagerForAgricultureResourceName, dataConnectorName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get specific Data Connector resource by DataConnectorName.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specific Data Connector resource by DataConnectorName along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DataConnectorInner>> getWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String dataConnectorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (dataConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), resourceGroupName, this.client.getSubscriptionId(),
            dataManagerForAgricultureResourceName, dataConnectorName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get specific Data Connector resource by DataConnectorName.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specific Data Connector resource by DataConnectorName on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DataConnectorInner> getAsync(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String dataConnectorName) {
        return getWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get specific Data Connector resource by DataConnectorName.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specific Data Connector resource by DataConnectorName along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DataConnectorInner> getWithResponse(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String dataConnectorName, Context context) {
        return getWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName,
            context).block();
    }

    /**
     * Get specific Data Connector resource by DataConnectorName.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specific Data Connector resource by DataConnectorName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataConnectorInner get(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String dataConnectorName) {
        return getWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName,
            Context.NONE).getValue();
    }

    /**
     * Create or update Data Connector For MADMA resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @param body Body must be valid DataConnector request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dataConnector Model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DataConnectorInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String dataConnectorName, DataConnectorInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (dataConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataConnectorName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), resourceGroupName,
                this.client.getSubscriptionId(), dataManagerForAgricultureResourceName, dataConnectorName,
                this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update Data Connector For MADMA resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @param body Body must be valid DataConnector request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dataConnector Model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DataConnectorInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String dataConnectorName, DataConnectorInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (dataConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataConnectorName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), resourceGroupName, this.client.getSubscriptionId(),
            dataManagerForAgricultureResourceName, dataConnectorName, this.client.getApiVersion(), body, accept,
            context);
    }

    /**
     * Create or update Data Connector For MADMA resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @param body Body must be valid DataConnector request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dataConnector Model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DataConnectorInner> createOrUpdateAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String dataConnectorName, DataConnectorInner body) {
        return createOrUpdateWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName,
            dataConnectorName, body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create or update Data Connector For MADMA resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @param body Body must be valid DataConnector request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dataConnector Model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DataConnectorInner> createOrUpdateWithResponse(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String dataConnectorName, DataConnectorInner body,
        Context context) {
        return createOrUpdateWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName,
            dataConnectorName, body, context).block();
    }

    /**
     * Create or update Data Connector For MADMA resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @param body Body must be valid DataConnector request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dataConnector Model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataConnectorInner createOrUpdate(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String dataConnectorName, DataConnectorInner body) {
        return createOrUpdateWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName,
            body, Context.NONE).getValue();
    }

    /**
     * Delete a Data Connectors with given dataConnector name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 400.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String dataConnectorName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (dataConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), resourceGroupName,
                this.client.getSubscriptionId(), dataManagerForAgricultureResourceName, dataConnectorName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a Data Connectors with given dataConnector name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 400.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String dataConnectorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (dataConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), resourceGroupName, this.client.getSubscriptionId(),
            dataManagerForAgricultureResourceName, dataConnectorName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Delete a Data Connectors with given dataConnector name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 400.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String dataConnectorName) {
        return deleteWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a Data Connectors with given dataConnector name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 400.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String dataConnectorName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName,
            context).block();
    }

    /**
     * Delete a Data Connectors with given dataConnector name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param dataConnectorName Connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 400.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String dataConnectorName) {
        deleteWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, dataConnectorName, Context.NONE);
    }

    /**
     * Lists the Data Connector Credentials for MADMA instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Continuation token for getting next set of results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataConnectorInner>> listSinglePageAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, Integer maxPageSize, String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, dataManagerForAgricultureResourceName, this.client.getApiVersion(), maxPageSize,
                skipToken, accept, context))
            .<PagedResponse<DataConnectorInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the Data Connector Credentials for MADMA instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Continuation token for getting next set of results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataConnectorInner>> listSinglePageAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, Integer maxPageSize, String skipToken, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dataManagerForAgricultureResourceName, this.client.getApiVersion(), maxPageSize, skipToken, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists the Data Connector Credentials for MADMA instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Continuation token for getting next set of results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DataConnectorInner> listAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, Integer maxPageSize, String skipToken) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, dataManagerForAgricultureResourceName, maxPageSize, skipToken),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the Data Connector Credentials for MADMA instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DataConnectorInner> listAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName) {
        final Integer maxPageSize = null;
        final String skipToken = null;
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, dataManagerForAgricultureResourceName, maxPageSize, skipToken),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the Data Connector Credentials for MADMA instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Continuation token for getting next set of results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DataConnectorInner> listAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, Integer maxPageSize, String skipToken, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, dataManagerForAgricultureResourceName,
            maxPageSize, skipToken, context), nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the Data Connector Credentials for MADMA instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataConnectorInner> list(String resourceGroupName,
        String dataManagerForAgricultureResourceName) {
        final Integer maxPageSize = null;
        final String skipToken = null;
        return new PagedIterable<>(
            listAsync(resourceGroupName, dataManagerForAgricultureResourceName, maxPageSize, skipToken));
    }

    /**
     * Lists the Data Connector Credentials for MADMA instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Continuation token for getting next set of results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataConnectorInner> list(String resourceGroupName,
        String dataManagerForAgricultureResourceName, Integer maxPageSize, String skipToken, Context context) {
        return new PagedIterable<>(
            listAsync(resourceGroupName, dataManagerForAgricultureResourceName, maxPageSize, skipToken, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataConnectorInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DataConnectorInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataConnectorInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
