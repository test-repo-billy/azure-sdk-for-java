// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.agrifood.fluent.DataManagerForAgricultureResourcesClient;
import com.azure.resourcemanager.agrifood.fluent.models.DataManagerForAgricultureInner;
import com.azure.resourcemanager.agrifood.models.DataManagerForAgricultureListResponse;
import com.azure.resourcemanager.agrifood.models.DataManagerForAgricultureUpdateRequestModel;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DataManagerForAgricultureResourcesClient.
 */
public final class DataManagerForAgricultureResourcesClientImpl implements DataManagerForAgricultureResourcesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DataManagerForAgricultureResourcesService service;

    /**
     * The service client containing this operation class.
     */
    private final AgriFoodManagementClientImpl client;

    /**
     * Initializes an instance of DataManagerForAgricultureResourcesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DataManagerForAgricultureResourcesClientImpl(AgriFoodManagementClientImpl client) {
        this.service = RestProxy.create(DataManagerForAgricultureResourcesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AgriFoodManagementClientDataManagerForAgricultureResources to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AgriFoodManagementCl")
    public interface DataManagerForAgricultureResourcesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataManagerForAgricultureInner>> getByResourceGroup(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerForAgricultureResourceName") String dataManagerForAgricultureResourceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataManagerForAgricultureInner>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerForAgricultureResourceName") String dataManagerForAgricultureResourceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DataManagerForAgricultureInner request, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerForAgricultureResourceName") String dataManagerForAgricultureResourceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DataManagerForAgricultureUpdateRequestModel request,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerForAgricultureResourceName") String dataManagerForAgricultureResourceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.AgFoodPlatform/farmBeats")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataManagerForAgricultureListResponse>> list(@HostParam("$host") String endpoint,
            @QueryParam("$maxPageSize") Integer maxPageSize, @QueryParam("$skipToken") String skipToken,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataManagerForAgricultureListResponse>> listByResourceGroup(@HostParam("$host") String endpoint,
            @QueryParam("$maxPageSize") Integer maxPageSize, @QueryParam("$skipToken") String skipToken,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataManagerForAgricultureListResponse>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataManagerForAgricultureListResponse>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get DataManagerForAgriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dataManagerForAgriculture resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DataManagerForAgricultureInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByResourceGroup(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, dataManagerForAgricultureResourceName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get DataManagerForAgriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dataManagerForAgriculture resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DataManagerForAgricultureInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dataManagerForAgricultureResourceName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get DataManagerForAgriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dataManagerForAgriculture resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DataManagerForAgricultureInner> getByResourceGroupAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get DataManagerForAgriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dataManagerForAgriculture resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DataManagerForAgricultureInner> getByResourceGroupWithResponse(String resourceGroupName,
        String dataManagerForAgricultureResourceName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName, context)
            .block();
    }

    /**
     * Get DataManagerForAgriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dataManagerForAgriculture resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataManagerForAgricultureInner getByResourceGroup(String resourceGroupName,
        String dataManagerForAgricultureResourceName) {
        return getByResourceGroupWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, Context.NONE)
            .getValue();
    }

    /**
     * Create or update Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Data Manager For Agriculture resource create or update request object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture ARM Resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DataManagerForAgricultureInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, DataManagerForAgricultureInner request) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, dataManagerForAgricultureResourceName, this.client.getApiVersion(), request, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Data Manager For Agriculture resource create or update request object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture ARM Resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DataManagerForAgricultureInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, DataManagerForAgricultureInner request, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dataManagerForAgricultureResourceName, this.client.getApiVersion(), request, accept, context);
    }

    /**
     * Create or update Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Data Manager For Agriculture resource create or update request object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture ARM Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DataManagerForAgricultureInner> createOrUpdateAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, DataManagerForAgricultureInner request) {
        return createOrUpdateWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName, request)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create or update Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Data Manager For Agriculture resource create or update request object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture ARM Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DataManagerForAgricultureInner> createOrUpdateWithResponse(String resourceGroupName,
        String dataManagerForAgricultureResourceName, DataManagerForAgricultureInner request, Context context) {
        return createOrUpdateWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName, request,
            context).block();
    }

    /**
     * Create or update Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Data Manager For Agriculture resource create or update request object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture ARM Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataManagerForAgricultureInner createOrUpdate(String resourceGroupName,
        String dataManagerForAgricultureResourceName, DataManagerForAgricultureInner request) {
        return createOrUpdateWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, request,
            Context.NONE).getValue();
    }

    /**
     * Update a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Request object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture ARM Resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, DataManagerForAgricultureUpdateRequestModel request) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    dataManagerForAgricultureResourceName, this.client.getApiVersion(), request, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Request object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture ARM Resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, DataManagerForAgricultureUpdateRequestModel request,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dataManagerForAgricultureResourceName, this.client.getApiVersion(), request, accept, context);
    }

    /**
     * Update a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Request object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of data Manager For Agriculture ARM Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DataManagerForAgricultureInner>, DataManagerForAgricultureInner> beginUpdateAsync(
        String resourceGroupName, String dataManagerForAgricultureResourceName,
        DataManagerForAgricultureUpdateRequestModel request) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName, request);
        return this.client.<DataManagerForAgricultureInner, DataManagerForAgricultureInner>getLroResult(mono,
            this.client.getHttpPipeline(), DataManagerForAgricultureInner.class, DataManagerForAgricultureInner.class,
            this.client.getContext());
    }

    /**
     * Update a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Request object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of data Manager For Agriculture ARM Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DataManagerForAgricultureInner>, DataManagerForAgricultureInner> beginUpdateAsync(
        String resourceGroupName, String dataManagerForAgricultureResourceName,
        DataManagerForAgricultureUpdateRequestModel request, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName, request, context);
        return this.client.<DataManagerForAgricultureInner, DataManagerForAgricultureInner>getLroResult(mono,
            this.client.getHttpPipeline(), DataManagerForAgricultureInner.class, DataManagerForAgricultureInner.class,
            context);
    }

    /**
     * Update a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Request object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data Manager For Agriculture ARM Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DataManagerForAgricultureInner>, DataManagerForAgricultureInner> beginUpdate(
        String resourceGroupName, String dataManagerForAgricultureResourceName,
        DataManagerForAgricultureUpdateRequestModel request) {
        return this.beginUpdateAsync(resourceGroupName, dataManagerForAgricultureResourceName, request).getSyncPoller();
    }

    /**
     * Update a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Request object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data Manager For Agriculture ARM Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DataManagerForAgricultureInner>, DataManagerForAgricultureInner> beginUpdate(
        String resourceGroupName, String dataManagerForAgricultureResourceName,
        DataManagerForAgricultureUpdateRequestModel request, Context context) {
        return this.beginUpdateAsync(resourceGroupName, dataManagerForAgricultureResourceName, request, context)
            .getSyncPoller();
    }

    /**
     * Update a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Request object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture ARM Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DataManagerForAgricultureInner> updateAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, DataManagerForAgricultureUpdateRequestModel request) {
        return beginUpdateAsync(resourceGroupName, dataManagerForAgricultureResourceName, request).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Request object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture ARM Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DataManagerForAgricultureInner> updateAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, DataManagerForAgricultureUpdateRequestModel request,
        Context context) {
        return beginUpdateAsync(resourceGroupName, dataManagerForAgricultureResourceName, request, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Request object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture ARM Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataManagerForAgricultureInner update(String resourceGroupName, String dataManagerForAgricultureResourceName,
        DataManagerForAgricultureUpdateRequestModel request) {
        return updateAsync(resourceGroupName, dataManagerForAgricultureResourceName, request).block();
    }

    /**
     * Update a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param request Request object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture ARM Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataManagerForAgricultureInner update(String resourceGroupName, String dataManagerForAgricultureResourceName,
        DataManagerForAgricultureUpdateRequestModel request, Context context) {
        return updateAsync(resourceGroupName, dataManagerForAgricultureResourceName, request, context).block();
    }

    /**
     * Delete a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, dataManagerForAgricultureResourceName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dataManagerForAgricultureResourceName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Delete a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String dataManagerForAgricultureResourceName) {
        return deleteWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String dataManagerForAgricultureResourceName,
        Context context) {
        return deleteWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName, context).block();
    }

    /**
     * Delete a Data Manager For Agriculture resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String dataManagerForAgricultureResourceName) {
        deleteWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, Context.NONE);
    }

    /**
     * Lists the DataManagerForAgriculture instances for a subscription.
     * 
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Skip token for getting next set of results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataManagerForAgricultureInner>> listSinglePageAsync(Integer maxPageSize,
        String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), maxPageSize, skipToken,
                this.client.getSubscriptionId(), this.client.getApiVersion(), accept, context))
            .<PagedResponse<DataManagerForAgricultureInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the DataManagerForAgriculture instances for a subscription.
     * 
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Skip token for getting next set of results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataManagerForAgricultureInner>> listSinglePageAsync(Integer maxPageSize,
        String skipToken, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), maxPageSize, skipToken, this.client.getSubscriptionId(),
                this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists the DataManagerForAgriculture instances for a subscription.
     * 
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Skip token for getting next set of results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DataManagerForAgricultureInner> listAsync(Integer maxPageSize, String skipToken) {
        return new PagedFlux<>(() -> listSinglePageAsync(maxPageSize, skipToken),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the DataManagerForAgriculture instances for a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DataManagerForAgricultureInner> listAsync() {
        final Integer maxPageSize = null;
        final String skipToken = null;
        return new PagedFlux<>(() -> listSinglePageAsync(maxPageSize, skipToken),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the DataManagerForAgriculture instances for a subscription.
     * 
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Skip token for getting next set of results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DataManagerForAgricultureInner> listAsync(Integer maxPageSize, String skipToken,
        Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(maxPageSize, skipToken, context),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the DataManagerForAgriculture instances for a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataManagerForAgricultureInner> list() {
        final Integer maxPageSize = null;
        final String skipToken = null;
        return new PagedIterable<>(listAsync(maxPageSize, skipToken));
    }

    /**
     * Lists the DataManagerForAgriculture instances for a subscription.
     * 
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Skip token for getting next set of results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataManagerForAgricultureInner> list(Integer maxPageSize, String skipToken, Context context) {
        return new PagedIterable<>(listAsync(maxPageSize, skipToken, context));
    }

    /**
     * Lists the DataManagerForAgriculture instances for a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Continuation token for getting next set of results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataManagerForAgricultureInner>>
        listByResourceGroupSinglePageAsync(String resourceGroupName, Integer maxPageSize, String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(), maxPageSize, skipToken,
                resourceGroupName, this.client.getSubscriptionId(), this.client.getApiVersion(), accept, context))
            .<PagedResponse<DataManagerForAgricultureInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the DataManagerForAgriculture instances for a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Continuation token for getting next set of results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataManagerForAgricultureInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, Integer maxPageSize, String skipToken, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(this.client.getEndpoint(), maxPageSize, skipToken, resourceGroupName,
                this.client.getSubscriptionId(), this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists the DataManagerForAgriculture instances for a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Continuation token for getting next set of results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DataManagerForAgricultureInner> listByResourceGroupAsync(String resourceGroupName,
        Integer maxPageSize, String skipToken) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName, maxPageSize, skipToken),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the DataManagerForAgriculture instances for a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DataManagerForAgricultureInner> listByResourceGroupAsync(String resourceGroupName) {
        final Integer maxPageSize = null;
        final String skipToken = null;
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName, maxPageSize, skipToken),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the DataManagerForAgriculture instances for a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Continuation token for getting next set of results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DataManagerForAgricultureInner> listByResourceGroupAsync(String resourceGroupName,
        Integer maxPageSize, String skipToken, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, maxPageSize, skipToken, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the DataManagerForAgriculture instances for a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataManagerForAgricultureInner> listByResourceGroup(String resourceGroupName) {
        final Integer maxPageSize = null;
        final String skipToken = null;
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, maxPageSize, skipToken));
    }

    /**
     * Lists the DataManagerForAgriculture instances for a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param skipToken Continuation token for getting next set of results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results as
     * paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataManagerForAgricultureInner> listByResourceGroup(String resourceGroupName,
        Integer maxPageSize, String skipToken, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, maxPageSize, skipToken, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataManagerForAgricultureInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DataManagerForAgricultureInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataManagerForAgricultureInner>> listBySubscriptionNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataManagerForAgricultureInner>>
        listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DataManagerForAgricultureInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of requested objects and a URL link to get the next set of results along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataManagerForAgricultureInner>> listByResourceGroupNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
