// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.agrifood.fluent.models.DataManagerForAgricultureInner;
import com.azure.resourcemanager.agrifood.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.agrifood.models.DataManagerForAgriculture;
import com.azure.resourcemanager.agrifood.models.DataManagerForAgricultureUpdateProperties;
import com.azure.resourcemanager.agrifood.models.DataManagerForAgricultureUpdateRequestModel;
import com.azure.resourcemanager.agrifood.models.Identity;
import com.azure.resourcemanager.agrifood.models.PrivateEndpointConnection;
import com.azure.resourcemanager.agrifood.models.ProvisioningState;
import com.azure.resourcemanager.agrifood.models.PublicNetworkAccess;
import com.azure.resourcemanager.agrifood.models.SensorIntegration;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public final class DataManagerForAgricultureImpl
    implements DataManagerForAgriculture, DataManagerForAgriculture.Definition, DataManagerForAgriculture.Update {
    private DataManagerForAgricultureInner innerObject;

    private final com.azure.resourcemanager.agrifood.AgriFoodManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Identity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String instanceUri() {
        return this.innerModel().instanceUri();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public SensorIntegration sensorIntegration() {
        return this.innerModel().sensorIntegration();
    }

    public PublicNetworkAccess publicNetworkAccess() {
        return this.innerModel().publicNetworkAccess();
    }

    public List<PrivateEndpointConnection> privateEndpointConnections() {
        List<PrivateEndpointConnectionInner> inner = this.innerModel().privateEndpointConnections();
        if (inner != null) {
            return Collections.unmodifiableList(inner.stream()
                .map(inner1 -> new PrivateEndpointConnectionImpl(inner1, this.manager())).collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public DataManagerForAgricultureInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.agrifood.AgriFoodManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String dataManagerForAgricultureResourceName;

    private DataManagerForAgricultureUpdateRequestModel updateRequest;

    public DataManagerForAgricultureImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public DataManagerForAgriculture create() {
        this.innerObject
            = serviceManager.serviceClient().getDataManagerForAgricultureResources().createOrUpdateWithResponse(
                resourceGroupName, dataManagerForAgricultureResourceName, this.innerModel(), Context.NONE).getValue();
        return this;
    }

    public DataManagerForAgriculture create(Context context) {
        this.innerObject
            = serviceManager.serviceClient().getDataManagerForAgricultureResources().createOrUpdateWithResponse(
                resourceGroupName, dataManagerForAgricultureResourceName, this.innerModel(), context).getValue();
        return this;
    }

    DataManagerForAgricultureImpl(String name, com.azure.resourcemanager.agrifood.AgriFoodManager serviceManager) {
        this.innerObject = new DataManagerForAgricultureInner();
        this.serviceManager = serviceManager;
        this.dataManagerForAgricultureResourceName = name;
    }

    public DataManagerForAgricultureImpl update() {
        this.updateRequest = new DataManagerForAgricultureUpdateRequestModel();
        return this;
    }

    public DataManagerForAgriculture apply() {
        this.innerObject = serviceManager.serviceClient().getDataManagerForAgricultureResources()
            .update(resourceGroupName, dataManagerForAgricultureResourceName, updateRequest, Context.NONE);
        return this;
    }

    public DataManagerForAgriculture apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getDataManagerForAgricultureResources()
            .update(resourceGroupName, dataManagerForAgricultureResourceName, updateRequest, context);
        return this;
    }

    DataManagerForAgricultureImpl(DataManagerForAgricultureInner innerObject,
        com.azure.resourcemanager.agrifood.AgriFoodManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.dataManagerForAgricultureResourceName = Utils.getValueFromIdByName(innerObject.id(), "farmBeats");
    }

    public DataManagerForAgriculture refresh() {
        this.innerObject = serviceManager.serviceClient().getDataManagerForAgricultureResources()
            .getByResourceGroupWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, Context.NONE)
            .getValue();
        return this;
    }

    public DataManagerForAgriculture refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getDataManagerForAgricultureResources()
            .getByResourceGroupWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, context)
            .getValue();
        return this;
    }

    public DataManagerForAgricultureImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public DataManagerForAgricultureImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public DataManagerForAgricultureImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateRequest.withTags(tags);
            return this;
        }
    }

    public DataManagerForAgricultureImpl withIdentity(Identity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateRequest.withIdentity(identity);
            return this;
        }
    }

    public DataManagerForAgricultureImpl withSensorIntegration(SensorIntegration sensorIntegration) {
        this.innerModel().withSensorIntegration(sensorIntegration);
        return this;
    }

    public DataManagerForAgricultureImpl withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.innerModel().withPublicNetworkAccess(publicNetworkAccess);
        return this;
    }

    public DataManagerForAgricultureImpl withProperties(DataManagerForAgricultureUpdateProperties properties) {
        this.updateRequest.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
