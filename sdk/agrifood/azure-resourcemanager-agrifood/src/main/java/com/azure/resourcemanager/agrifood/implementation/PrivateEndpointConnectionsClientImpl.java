// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.agrifood.fluent.PrivateEndpointConnectionsClient;
import com.azure.resourcemanager.agrifood.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.agrifood.fluent.models.PrivateEndpointConnectionListResultInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in PrivateEndpointConnectionsClient.
 */
public final class PrivateEndpointConnectionsClientImpl implements PrivateEndpointConnectionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final PrivateEndpointConnectionsService service;

    /**
     * The service client containing this operation class.
     */
    private final AgriFoodManagementClientImpl client;

    /**
     * Initializes an instance of PrivateEndpointConnectionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    PrivateEndpointConnectionsClientImpl(AgriFoodManagementClientImpl client) {
        this.service = RestProxy.create(PrivateEndpointConnectionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AgriFoodManagementClientPrivateEndpointConnections to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AgriFoodManagementCl")
    public interface PrivateEndpointConnectionsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/privateEndpointConnections/{privateEndpointConnectionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ManagementException.class, code = { 400 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PrivateEndpointConnectionInner>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerForAgricultureResourceName") String dataManagerForAgricultureResourceName,
            @PathParam("privateEndpointConnectionName") String privateEndpointConnectionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") PrivateEndpointConnectionInner request, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/privateEndpointConnections/{privateEndpointConnectionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ManagementException.class, code = { 404 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PrivateEndpointConnectionInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerForAgricultureResourceName") String dataManagerForAgricultureResourceName,
            @PathParam("privateEndpointConnectionName") String privateEndpointConnectionName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/privateEndpointConnections/{privateEndpointConnectionName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerForAgricultureResourceName") String dataManagerForAgricultureResourceName,
            @PathParam("privateEndpointConnectionName") String privateEndpointConnectionName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/privateEndpointConnections")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PrivateEndpointConnectionListResultInner>> listByResource(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerForAgricultureResourceName") String dataManagerForAgricultureResourceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Approves or Rejects a Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @param request Request object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 400.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the private endpoint connection resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PrivateEndpointConnectionInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName,
        PrivateEndpointConnectionInner request) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (privateEndpointConnectionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter privateEndpointConnectionName is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, dataManagerForAgricultureResourceName, privateEndpointConnectionName,
                this.client.getApiVersion(), request, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Approves or Rejects a Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @param request Request object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 400.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the private endpoint connection resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PrivateEndpointConnectionInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName,
        PrivateEndpointConnectionInner request, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (privateEndpointConnectionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter privateEndpointConnectionName is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dataManagerForAgricultureResourceName, privateEndpointConnectionName, this.client.getApiVersion(), request,
            accept, context);
    }

    /**
     * Approves or Rejects a Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @param request Request object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 400.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the private endpoint connection resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PrivateEndpointConnectionInner> createOrUpdateAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName,
        PrivateEndpointConnectionInner request) {
        return createOrUpdateWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName,
            privateEndpointConnectionName, request).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Approves or Rejects a Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @param request Request object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 400.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the private endpoint connection resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PrivateEndpointConnectionInner> createOrUpdateWithResponse(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName,
        PrivateEndpointConnectionInner request, Context context) {
        return createOrUpdateWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName,
            privateEndpointConnectionName, request, context).block();
    }

    /**
     * Approves or Rejects a Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @param request Request object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 400.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the private endpoint connection resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PrivateEndpointConnectionInner createOrUpdate(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName,
        PrivateEndpointConnectionInner request) {
        return createOrUpdateWithResponse(resourceGroupName, dataManagerForAgricultureResourceName,
            privateEndpointConnectionName, request, Context.NONE).getValue();
    }

    /**
     * Get Private endpoint connection object.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 404.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return private endpoint connection object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PrivateEndpointConnectionInner>> getWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (privateEndpointConnectionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter privateEndpointConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, dataManagerForAgricultureResourceName, privateEndpointConnectionName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get Private endpoint connection object.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 404.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return private endpoint connection object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PrivateEndpointConnectionInner>> getWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (privateEndpointConnectionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter privateEndpointConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dataManagerForAgricultureResourceName, privateEndpointConnectionName, this.client.getApiVersion(), accept,
            context);
    }

    /**
     * Get Private endpoint connection object.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 404.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return private endpoint connection object on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PrivateEndpointConnectionInner> getAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName) {
        return getWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName,
            privateEndpointConnectionName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get Private endpoint connection object.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 404.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return private endpoint connection object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PrivateEndpointConnectionInner> getWithResponse(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName, Context context) {
        return getWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName,
            privateEndpointConnectionName, context).block();
    }

    /**
     * Get Private endpoint connection object.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws ManagementException thrown if the request is rejected by server on status code 404.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return private endpoint connection object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PrivateEndpointConnectionInner get(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String privateEndpointConnectionName) {
        return getWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, privateEndpointConnectionName,
            Context.NONE).getValue();
    }

    /**
     * Delete Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (privateEndpointConnectionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter privateEndpointConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, dataManagerForAgricultureResourceName, privateEndpointConnectionName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        if (privateEndpointConnectionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter privateEndpointConnectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dataManagerForAgricultureResourceName, privateEndpointConnectionName, this.client.getApiVersion(), accept,
            context);
    }

    /**
     * Delete Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName,
            dataManagerForAgricultureResourceName, privateEndpointConnectionName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName,
            dataManagerForAgricultureResourceName, privateEndpointConnectionName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Delete Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName) {
        return this
            .beginDeleteAsync(resourceGroupName, dataManagerForAgricultureResourceName, privateEndpointConnectionName)
            .getSyncPoller();
    }

    /**
     * Delete Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, dataManagerForAgricultureResourceName,
            privateEndpointConnectionName, context).getSyncPoller();
    }

    /**
     * Delete Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String privateEndpointConnectionName) {
        return beginDeleteAsync(resourceGroupName, dataManagerForAgricultureResourceName, privateEndpointConnectionName)
            .last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String privateEndpointConnectionName, Context context) {
        return beginDeleteAsync(resourceGroupName, dataManagerForAgricultureResourceName, privateEndpointConnectionName,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String privateEndpointConnectionName) {
        deleteAsync(resourceGroupName, dataManagerForAgricultureResourceName, privateEndpointConnectionName).block();
    }

    /**
     * Delete Private endpoint connection request.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param privateEndpointConnectionName Private endpoint connection name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String privateEndpointConnectionName, Context context) {
        deleteAsync(resourceGroupName, dataManagerForAgricultureResourceName, privateEndpointConnectionName, context)
            .block();
    }

    /**
     * Get list of Private endpoint connections.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Private endpoint connections along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PrivateEndpointConnectionListResultInner>>
        listByResourceWithResponseAsync(String resourceGroupName, String dataManagerForAgricultureResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResource(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, dataManagerForAgricultureResourceName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get list of Private endpoint connections.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Private endpoint connections along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PrivateEndpointConnectionListResultInner>> listByResourceWithResponseAsync(
        String resourceGroupName, String dataManagerForAgricultureResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerForAgricultureResourceName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByResource(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dataManagerForAgricultureResourceName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get list of Private endpoint connections.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Private endpoint connections on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PrivateEndpointConnectionListResultInner> listByResourceAsync(String resourceGroupName,
        String dataManagerForAgricultureResourceName) {
        return listByResourceWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get list of Private endpoint connections.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Private endpoint connections along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PrivateEndpointConnectionListResultInner> listByResourceWithResponse(String resourceGroupName,
        String dataManagerForAgricultureResourceName, Context context) {
        return listByResourceWithResponseAsync(resourceGroupName, dataManagerForAgricultureResourceName, context)
            .block();
    }

    /**
     * Get list of Private endpoint connections.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Private endpoint connections.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PrivateEndpointConnectionListResultInner listByResource(String resourceGroupName,
        String dataManagerForAgricultureResourceName) {
        return listByResourceWithResponse(resourceGroupName, dataManagerForAgricultureResourceName, Context.NONE)
            .getValue();
    }
}
