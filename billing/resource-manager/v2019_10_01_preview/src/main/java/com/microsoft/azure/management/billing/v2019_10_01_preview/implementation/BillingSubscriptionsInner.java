/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2019_10_01_preview.BillingSubscriptionsTransferHeaders;
import com.microsoft.azure.management.billing.v2019_10_01_preview.ErrorResponseException;
import com.microsoft.azure.management.billing.v2019_10_01_preview.TransferBillingSubscriptionRequestProperties;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BillingSubscriptions.
 */
public class BillingSubscriptionsInner {
    /** The Retrofit service to perform REST calls. */
    private BillingSubscriptionsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of BillingSubscriptionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BillingSubscriptionsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(BillingSubscriptionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for BillingSubscriptions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BillingSubscriptionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.BillingSubscriptions listByBillingAccountName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions")
        Observable<Response<ResponseBody>> listByBillingAccountName(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.BillingSubscriptions listByBillingProfileName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingSubscriptions")
        Observable<Response<ResponseBody>> listByBillingProfileName(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.BillingSubscriptions listByInvoiceSectionName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions")
        Observable<Response<ResponseBody>> listByInvoiceSectionName(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("invoiceSectionName") String invoiceSectionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.BillingSubscriptions get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("invoiceSectionName") String invoiceSectionName, @Path("billingSubscriptionName") String billingSubscriptionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.BillingSubscriptions transfer" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}/transfer")
        Observable<Response<ResponseBody>> transfer(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("invoiceSectionName") String invoiceSectionName, @Path("billingSubscriptionName") String billingSubscriptionName, @Body TransferBillingSubscriptionRequestProperties parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.BillingSubscriptions beginTransfer" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}/transfer")
        Observable<Response<ResponseBody>> beginTransfer(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("invoiceSectionName") String invoiceSectionName, @Path("billingSubscriptionName") String billingSubscriptionName, @Body TransferBillingSubscriptionRequestProperties parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.BillingSubscriptions validateTransfer" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}/validateTransferEligibility")
        Observable<Response<ResponseBody>> validateTransfer(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("invoiceSectionName") String invoiceSectionName, @Path("billingSubscriptionName") String billingSubscriptionName, @Body TransferBillingSubscriptionRequestProperties parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.BillingSubscriptions listByBillingAccountNameNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingAccountNameNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists billing subscriptions by billing account name.
     *
     * @param billingAccountName billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingSubscriptionInner&gt; object if successful.
     */
    public PagedList<BillingSubscriptionInner> listByBillingAccountName(final String billingAccountName) {
        ServiceResponse<Page<BillingSubscriptionInner>> response = listByBillingAccountNameSinglePageAsync(billingAccountName).toBlocking().single();
        return new PagedList<BillingSubscriptionInner>(response.body()) {
            @Override
            public Page<BillingSubscriptionInner> nextPage(String nextPageLink) {
                return listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists billing subscriptions by billing account name.
     *
     * @param billingAccountName billing Account Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingSubscriptionInner>> listByBillingAccountNameAsync(final String billingAccountName, final ListOperationCallback<BillingSubscriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNameSinglePageAsync(billingAccountName),
            new Func1<String, Observable<ServiceResponse<Page<BillingSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingSubscriptionInner>>> call(String nextPageLink) {
                    return listByBillingAccountNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists billing subscriptions by billing account name.
     *
     * @param billingAccountName billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingSubscriptionInner&gt; object
     */
    public Observable<Page<BillingSubscriptionInner>> listByBillingAccountNameAsync(final String billingAccountName) {
        return listByBillingAccountNameWithServiceResponseAsync(billingAccountName)
            .map(new Func1<ServiceResponse<Page<BillingSubscriptionInner>>, Page<BillingSubscriptionInner>>() {
                @Override
                public Page<BillingSubscriptionInner> call(ServiceResponse<Page<BillingSubscriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists billing subscriptions by billing account name.
     *
     * @param billingAccountName billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingSubscriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingSubscriptionInner>>> listByBillingAccountNameWithServiceResponseAsync(final String billingAccountName) {
        return listByBillingAccountNameSinglePageAsync(billingAccountName)
            .concatMap(new Func1<ServiceResponse<Page<BillingSubscriptionInner>>, Observable<ServiceResponse<Page<BillingSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingSubscriptionInner>>> call(ServiceResponse<Page<BillingSubscriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists billing subscriptions by billing account name.
     *
    ServiceResponse<PageImpl<BillingSubscriptionInner>> * @param billingAccountName billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingSubscriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingSubscriptionInner>>> listByBillingAccountNameSinglePageAsync(final String billingAccountName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingAccountName(billingAccountName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingSubscriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingSubscriptionInner>> result = listByBillingAccountNameDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingSubscriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingSubscriptionInner>> listByBillingAccountNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingSubscriptionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingSubscriptionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists billing subscriptions by billing profile name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingSubscriptionsListResultInner object if successful.
     */
    public BillingSubscriptionsListResultInner listByBillingProfileName(String billingAccountName, String billingProfileName) {
        return listByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName).toBlocking().single().body();
    }

    /**
     * Lists billing subscriptions by billing profile name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingSubscriptionsListResultInner> listByBillingProfileNameAsync(String billingAccountName, String billingProfileName, final ServiceCallback<BillingSubscriptionsListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName), serviceCallback);
    }

    /**
     * Lists billing subscriptions by billing profile name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingSubscriptionsListResultInner object
     */
    public Observable<BillingSubscriptionsListResultInner> listByBillingProfileNameAsync(String billingAccountName, String billingProfileName) {
        return listByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName).map(new Func1<ServiceResponse<BillingSubscriptionsListResultInner>, BillingSubscriptionsListResultInner>() {
            @Override
            public BillingSubscriptionsListResultInner call(ServiceResponse<BillingSubscriptionsListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists billing subscriptions by billing profile name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingSubscriptionsListResultInner object
     */
    public Observable<ServiceResponse<BillingSubscriptionsListResultInner>> listByBillingProfileNameWithServiceResponseAsync(String billingAccountName, String billingProfileName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingProfileName(billingAccountName, billingProfileName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingSubscriptionsListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingSubscriptionsListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingSubscriptionsListResultInner> clientResponse = listByBillingProfileNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingSubscriptionsListResultInner> listByBillingProfileNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingSubscriptionsListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingSubscriptionsListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists billing subscription by invoice section name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingSubscriptionsListResultInner object if successful.
     */
    public BillingSubscriptionsListResultInner listByInvoiceSectionName(String billingAccountName, String billingProfileName, String invoiceSectionName) {
        return listByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName).toBlocking().single().body();
    }

    /**
     * Lists billing subscription by invoice section name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingSubscriptionsListResultInner> listByInvoiceSectionNameAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, final ServiceCallback<BillingSubscriptionsListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName), serviceCallback);
    }

    /**
     * Lists billing subscription by invoice section name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingSubscriptionsListResultInner object
     */
    public Observable<BillingSubscriptionsListResultInner> listByInvoiceSectionNameAsync(String billingAccountName, String billingProfileName, String invoiceSectionName) {
        return listByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName).map(new Func1<ServiceResponse<BillingSubscriptionsListResultInner>, BillingSubscriptionsListResultInner>() {
            @Override
            public BillingSubscriptionsListResultInner call(ServiceResponse<BillingSubscriptionsListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists billing subscription by invoice section name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingSubscriptionsListResultInner object
     */
    public Observable<ServiceResponse<BillingSubscriptionsListResultInner>> listByInvoiceSectionNameWithServiceResponseAsync(String billingAccountName, String billingProfileName, String invoiceSectionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByInvoiceSectionName(billingAccountName, billingProfileName, invoiceSectionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingSubscriptionsListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingSubscriptionsListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingSubscriptionsListResultInner> clientResponse = listByInvoiceSectionNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingSubscriptionsListResultInner> listByInvoiceSectionNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingSubscriptionsListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingSubscriptionsListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get a single billing subscription by name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingSubscriptionInner object if successful.
     */
    public BillingSubscriptionInner get(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName).toBlocking().single().body();
    }

    /**
     * Get a single billing subscription by name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingSubscriptionInner> getAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, final ServiceCallback<BillingSubscriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName), serviceCallback);
    }

    /**
     * Get a single billing subscription by name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingSubscriptionInner object
     */
    public Observable<BillingSubscriptionInner> getAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName).map(new Func1<ServiceResponse<BillingSubscriptionInner>, BillingSubscriptionInner>() {
            @Override
            public BillingSubscriptionInner call(ServiceResponse<BillingSubscriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a single billing subscription by name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingSubscriptionInner object
     */
    public Observable<ServiceResponse<BillingSubscriptionInner>> getWithServiceResponseAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (billingSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingSubscriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingSubscriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingSubscriptionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingSubscriptionInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingSubscriptionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingSubscriptionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Transfers the subscription from one invoice section to another within a billing account.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param parameters Request parameters supplied to the Transfer Billing Subscription operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransferBillingSubscriptionResultInner object if successful.
     */
    public TransferBillingSubscriptionResultInner transfer(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters) {
        return transferWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters).toBlocking().last().body();
    }

    /**
     * Transfers the subscription from one invoice section to another within a billing account.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param parameters Request parameters supplied to the Transfer Billing Subscription operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransferBillingSubscriptionResultInner> transferAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters, final ServiceCallback<TransferBillingSubscriptionResultInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(transferWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters), serviceCallback);
    }

    /**
     * Transfers the subscription from one invoice section to another within a billing account.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param parameters Request parameters supplied to the Transfer Billing Subscription operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<TransferBillingSubscriptionResultInner> transferAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters) {
        return transferWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters).map(new Func1<ServiceResponseWithHeaders<TransferBillingSubscriptionResultInner, BillingSubscriptionsTransferHeaders>, TransferBillingSubscriptionResultInner>() {
            @Override
            public TransferBillingSubscriptionResultInner call(ServiceResponseWithHeaders<TransferBillingSubscriptionResultInner, BillingSubscriptionsTransferHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Transfers the subscription from one invoice section to another within a billing account.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param parameters Request parameters supplied to the Transfer Billing Subscription operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<TransferBillingSubscriptionResultInner, BillingSubscriptionsTransferHeaders>> transferWithServiceResponseAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (billingSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.transfer(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<TransferBillingSubscriptionResultInner>() { }.getType(), BillingSubscriptionsTransferHeaders.class);
    }

    /**
     * Transfers the subscription from one invoice section to another within a billing account.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param parameters Request parameters supplied to the Transfer Billing Subscription operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransferBillingSubscriptionResultInner object if successful.
     */
    public TransferBillingSubscriptionResultInner beginTransfer(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters) {
        return beginTransferWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters).toBlocking().single().body();
    }

    /**
     * Transfers the subscription from one invoice section to another within a billing account.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param parameters Request parameters supplied to the Transfer Billing Subscription operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransferBillingSubscriptionResultInner> beginTransferAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters, final ServiceCallback<TransferBillingSubscriptionResultInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginTransferWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters), serviceCallback);
    }

    /**
     * Transfers the subscription from one invoice section to another within a billing account.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param parameters Request parameters supplied to the Transfer Billing Subscription operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransferBillingSubscriptionResultInner object
     */
    public Observable<TransferBillingSubscriptionResultInner> beginTransferAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters) {
        return beginTransferWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters).map(new Func1<ServiceResponseWithHeaders<TransferBillingSubscriptionResultInner, BillingSubscriptionsTransferHeaders>, TransferBillingSubscriptionResultInner>() {
            @Override
            public TransferBillingSubscriptionResultInner call(ServiceResponseWithHeaders<TransferBillingSubscriptionResultInner, BillingSubscriptionsTransferHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Transfers the subscription from one invoice section to another within a billing account.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param parameters Request parameters supplied to the Transfer Billing Subscription operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransferBillingSubscriptionResultInner object
     */
    public Observable<ServiceResponseWithHeaders<TransferBillingSubscriptionResultInner, BillingSubscriptionsTransferHeaders>> beginTransferWithServiceResponseAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (billingSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginTransfer(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<TransferBillingSubscriptionResultInner, BillingSubscriptionsTransferHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<TransferBillingSubscriptionResultInner, BillingSubscriptionsTransferHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<TransferBillingSubscriptionResultInner, BillingSubscriptionsTransferHeaders> clientResponse = beginTransferDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<TransferBillingSubscriptionResultInner, BillingSubscriptionsTransferHeaders> beginTransferDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TransferBillingSubscriptionResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TransferBillingSubscriptionResultInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, BillingSubscriptionsTransferHeaders.class);
    }

    /**
     * Validates the transfer of billing subscriptions across invoice sections.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param parameters Parameters supplied to the Transfer Billing Subscription operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ValidateSubscriptionTransferEligibilityResultInner object if successful.
     */
    public ValidateSubscriptionTransferEligibilityResultInner validateTransfer(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters) {
        return validateTransferWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters).toBlocking().single().body();
    }

    /**
     * Validates the transfer of billing subscriptions across invoice sections.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param parameters Parameters supplied to the Transfer Billing Subscription operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ValidateSubscriptionTransferEligibilityResultInner> validateTransferAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters, final ServiceCallback<ValidateSubscriptionTransferEligibilityResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(validateTransferWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters), serviceCallback);
    }

    /**
     * Validates the transfer of billing subscriptions across invoice sections.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param parameters Parameters supplied to the Transfer Billing Subscription operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ValidateSubscriptionTransferEligibilityResultInner object
     */
    public Observable<ValidateSubscriptionTransferEligibilityResultInner> validateTransferAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters) {
        return validateTransferWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters).map(new Func1<ServiceResponse<ValidateSubscriptionTransferEligibilityResultInner>, ValidateSubscriptionTransferEligibilityResultInner>() {
            @Override
            public ValidateSubscriptionTransferEligibilityResultInner call(ServiceResponse<ValidateSubscriptionTransferEligibilityResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Validates the transfer of billing subscriptions across invoice sections.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param parameters Parameters supplied to the Transfer Billing Subscription operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ValidateSubscriptionTransferEligibilityResultInner object
     */
    public Observable<ServiceResponse<ValidateSubscriptionTransferEligibilityResultInner>> validateTransferWithServiceResponseAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (billingSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.validateTransfer(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ValidateSubscriptionTransferEligibilityResultInner>>>() {
                @Override
                public Observable<ServiceResponse<ValidateSubscriptionTransferEligibilityResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ValidateSubscriptionTransferEligibilityResultInner> clientResponse = validateTransferDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ValidateSubscriptionTransferEligibilityResultInner> validateTransferDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ValidateSubscriptionTransferEligibilityResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ValidateSubscriptionTransferEligibilityResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists billing subscriptions by billing account name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingSubscriptionInner&gt; object if successful.
     */
    public PagedList<BillingSubscriptionInner> listByBillingAccountNameNext(final String nextPageLink) {
        ServiceResponse<Page<BillingSubscriptionInner>> response = listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BillingSubscriptionInner>(response.body()) {
            @Override
            public Page<BillingSubscriptionInner> nextPage(String nextPageLink) {
                return listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists billing subscriptions by billing account name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingSubscriptionInner>> listByBillingAccountNameNextAsync(final String nextPageLink, final ServiceFuture<List<BillingSubscriptionInner>> serviceFuture, final ListOperationCallback<BillingSubscriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNameNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BillingSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingSubscriptionInner>>> call(String nextPageLink) {
                    return listByBillingAccountNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists billing subscriptions by billing account name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingSubscriptionInner&gt; object
     */
    public Observable<Page<BillingSubscriptionInner>> listByBillingAccountNameNextAsync(final String nextPageLink) {
        return listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BillingSubscriptionInner>>, Page<BillingSubscriptionInner>>() {
                @Override
                public Page<BillingSubscriptionInner> call(ServiceResponse<Page<BillingSubscriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists billing subscriptions by billing account name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingSubscriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingSubscriptionInner>>> listByBillingAccountNameNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingAccountNameNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BillingSubscriptionInner>>, Observable<ServiceResponse<Page<BillingSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingSubscriptionInner>>> call(ServiceResponse<Page<BillingSubscriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists billing subscriptions by billing account name.
     *
    ServiceResponse<PageImpl<BillingSubscriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingSubscriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingSubscriptionInner>>> listByBillingAccountNameNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingAccountNameNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingSubscriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingSubscriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingSubscriptionInner>> result = listByBillingAccountNameNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingSubscriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingSubscriptionInner>> listByBillingAccountNameNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingSubscriptionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingSubscriptionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
