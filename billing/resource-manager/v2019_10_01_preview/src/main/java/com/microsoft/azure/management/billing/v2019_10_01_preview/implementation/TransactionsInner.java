/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2019_10_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Transactions.
 */
public class TransactionsInner {
    /** The Retrofit service to perform REST calls. */
    private TransactionsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of TransactionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public TransactionsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(TransactionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Transactions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface TransactionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Transactions listByBillingAccountName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/transactions")
        Observable<Response<ResponseBody>> listByBillingAccountName(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Query("startDate") String startDate, @Query("endDate") String endDate, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Transactions listByBillingProfileName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/transactions")
        Observable<Response<ResponseBody>> listByBillingProfileName(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Query("startDate") String startDate, @Query("endDate") String endDate, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Transactions listByInvoiceSectionName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transactions")
        Observable<Response<ResponseBody>> listByInvoiceSectionName(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("invoiceSectionName") String invoiceSectionName, @Query("api-version") String apiVersion, @Query("startDate") String startDate, @Query("endDate") String endDate, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Transactions get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/transactions/{transactionName}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("transactionName") String transactionName, @Query("startDate") String startDate, @Query("endDate") String endDate, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Transactions listByBillingAccountNameNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingAccountNameNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionInner&gt; object if successful.
     */
    public PagedList<TransactionInner> listByBillingAccountName(final String billingAccountName, final String startDate, final String endDate) {
        ServiceResponse<Page<TransactionInner>> response = listByBillingAccountNameSinglePageAsync(billingAccountName, startDate, endDate).toBlocking().single();
        return new PagedList<TransactionInner>(response.body()) {
            @Override
            public Page<TransactionInner> nextPage(String nextPageLink) {
                return listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionInner>> listByBillingAccountNameAsync(final String billingAccountName, final String startDate, final String endDate, final ListOperationCallback<TransactionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNameSinglePageAsync(billingAccountName, startDate, endDate),
            new Func1<String, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(String nextPageLink) {
                    return listByBillingAccountNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<Page<TransactionInner>> listByBillingAccountNameAsync(final String billingAccountName, final String startDate, final String endDate) {
        return listByBillingAccountNameWithServiceResponseAsync(billingAccountName, startDate, endDate)
            .map(new Func1<ServiceResponse<Page<TransactionInner>>, Page<TransactionInner>>() {
                @Override
                public Page<TransactionInner> call(ServiceResponse<Page<TransactionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByBillingAccountNameWithServiceResponseAsync(final String billingAccountName, final String startDate, final String endDate) {
        return listByBillingAccountNameSinglePageAsync(billingAccountName, startDate, endDate)
            .concatMap(new Func1<ServiceResponse<Page<TransactionInner>>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(ServiceResponse<Page<TransactionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByBillingAccountNameSinglePageAsync(final String billingAccountName, final String startDate, final String endDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (startDate == null) {
            throw new IllegalArgumentException("Parameter startDate is required and cannot be null.");
        }
        if (endDate == null) {
            throw new IllegalArgumentException("Parameter endDate is required and cannot be null.");
        }
        final String filter = null;
        return service.listByBillingAccountName(billingAccountName, this.client.apiVersion(), startDate, endDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionInner>> result = listByBillingAccountNameDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionInner&gt; object if successful.
     */
    public PagedList<TransactionInner> listByBillingAccountName(final String billingAccountName, final String startDate, final String endDate, final String filter) {
        ServiceResponse<Page<TransactionInner>> response = listByBillingAccountNameSinglePageAsync(billingAccountName, startDate, endDate, filter).toBlocking().single();
        return new PagedList<TransactionInner>(response.body()) {
            @Override
            public Page<TransactionInner> nextPage(String nextPageLink) {
                return listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionInner>> listByBillingAccountNameAsync(final String billingAccountName, final String startDate, final String endDate, final String filter, final ListOperationCallback<TransactionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNameSinglePageAsync(billingAccountName, startDate, endDate, filter),
            new Func1<String, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(String nextPageLink) {
                    return listByBillingAccountNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<Page<TransactionInner>> listByBillingAccountNameAsync(final String billingAccountName, final String startDate, final String endDate, final String filter) {
        return listByBillingAccountNameWithServiceResponseAsync(billingAccountName, startDate, endDate, filter)
            .map(new Func1<ServiceResponse<Page<TransactionInner>>, Page<TransactionInner>>() {
                @Override
                public Page<TransactionInner> call(ServiceResponse<Page<TransactionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByBillingAccountNameWithServiceResponseAsync(final String billingAccountName, final String startDate, final String endDate, final String filter) {
        return listByBillingAccountNameSinglePageAsync(billingAccountName, startDate, endDate, filter)
            .concatMap(new Func1<ServiceResponse<Page<TransactionInner>>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(ServiceResponse<Page<TransactionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
    ServiceResponse<PageImpl<TransactionInner>> * @param billingAccountName billing Account Id.
    ServiceResponse<PageImpl<TransactionInner>> * @param startDate Start date
    ServiceResponse<PageImpl<TransactionInner>> * @param endDate End date
    ServiceResponse<PageImpl<TransactionInner>> * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByBillingAccountNameSinglePageAsync(final String billingAccountName, final String startDate, final String endDate, final String filter) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (startDate == null) {
            throw new IllegalArgumentException("Parameter startDate is required and cannot be null.");
        }
        if (endDate == null) {
            throw new IllegalArgumentException("Parameter endDate is required and cannot be null.");
        }
        return service.listByBillingAccountName(billingAccountName, this.client.apiVersion(), startDate, endDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionInner>> result = listByBillingAccountNameDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TransactionInner>> listByBillingAccountNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TransactionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TransactionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the transactions by billing profile name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionListResultInner object if successful.
     */
    public TransactionListResultInner listByBillingProfileName(String billingAccountName, String billingProfileName, String startDate, String endDate) {
        return listByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName, startDate, endDate).toBlocking().single().body();
    }

    /**
     * Lists the transactions by billing profile name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionListResultInner> listByBillingProfileNameAsync(String billingAccountName, String billingProfileName, String startDate, String endDate, final ServiceCallback<TransactionListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName, startDate, endDate), serviceCallback);
    }

    /**
     * Lists the transactions by billing profile name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<TransactionListResultInner> listByBillingProfileNameAsync(String billingAccountName, String billingProfileName, String startDate, String endDate) {
        return listByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName, startDate, endDate).map(new Func1<ServiceResponse<TransactionListResultInner>, TransactionListResultInner>() {
            @Override
            public TransactionListResultInner call(ServiceResponse<TransactionListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the transactions by billing profile name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<ServiceResponse<TransactionListResultInner>> listByBillingProfileNameWithServiceResponseAsync(String billingAccountName, String billingProfileName, String startDate, String endDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (startDate == null) {
            throw new IllegalArgumentException("Parameter startDate is required and cannot be null.");
        }
        if (endDate == null) {
            throw new IllegalArgumentException("Parameter endDate is required and cannot be null.");
        }
        final String filter = null;
        return service.listByBillingProfileName(billingAccountName, billingProfileName, this.client.apiVersion(), startDate, endDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionListResultInner> clientResponse = listByBillingProfileNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the transactions by billing profile name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionListResultInner object if successful.
     */
    public TransactionListResultInner listByBillingProfileName(String billingAccountName, String billingProfileName, String startDate, String endDate, String filter) {
        return listByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName, startDate, endDate, filter).toBlocking().single().body();
    }

    /**
     * Lists the transactions by billing profile name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionListResultInner> listByBillingProfileNameAsync(String billingAccountName, String billingProfileName, String startDate, String endDate, String filter, final ServiceCallback<TransactionListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName, startDate, endDate, filter), serviceCallback);
    }

    /**
     * Lists the transactions by billing profile name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<TransactionListResultInner> listByBillingProfileNameAsync(String billingAccountName, String billingProfileName, String startDate, String endDate, String filter) {
        return listByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName, startDate, endDate, filter).map(new Func1<ServiceResponse<TransactionListResultInner>, TransactionListResultInner>() {
            @Override
            public TransactionListResultInner call(ServiceResponse<TransactionListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the transactions by billing profile name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<ServiceResponse<TransactionListResultInner>> listByBillingProfileNameWithServiceResponseAsync(String billingAccountName, String billingProfileName, String startDate, String endDate, String filter) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (startDate == null) {
            throw new IllegalArgumentException("Parameter startDate is required and cannot be null.");
        }
        if (endDate == null) {
            throw new IllegalArgumentException("Parameter endDate is required and cannot be null.");
        }
        return service.listByBillingProfileName(billingAccountName, billingProfileName, this.client.apiVersion(), startDate, endDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionListResultInner> clientResponse = listByBillingProfileNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TransactionListResultInner> listByBillingProfileNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TransactionListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TransactionListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the transactions by invoice section name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionListResultInner object if successful.
     */
    public TransactionListResultInner listByInvoiceSectionName(String billingAccountName, String billingProfileName, String invoiceSectionName, String startDate, String endDate) {
        return listByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, startDate, endDate).toBlocking().single().body();
    }

    /**
     * Lists the transactions by invoice section name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param startDate Start date
     * @param endDate End date
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionListResultInner> listByInvoiceSectionNameAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String startDate, String endDate, final ServiceCallback<TransactionListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, startDate, endDate), serviceCallback);
    }

    /**
     * Lists the transactions by invoice section name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<TransactionListResultInner> listByInvoiceSectionNameAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String startDate, String endDate) {
        return listByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, startDate, endDate).map(new Func1<ServiceResponse<TransactionListResultInner>, TransactionListResultInner>() {
            @Override
            public TransactionListResultInner call(ServiceResponse<TransactionListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the transactions by invoice section name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<ServiceResponse<TransactionListResultInner>> listByInvoiceSectionNameWithServiceResponseAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String startDate, String endDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (startDate == null) {
            throw new IllegalArgumentException("Parameter startDate is required and cannot be null.");
        }
        if (endDate == null) {
            throw new IllegalArgumentException("Parameter endDate is required and cannot be null.");
        }
        final String filter = null;
        return service.listByInvoiceSectionName(billingAccountName, billingProfileName, invoiceSectionName, this.client.apiVersion(), startDate, endDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionListResultInner> clientResponse = listByInvoiceSectionNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the transactions by invoice section name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionListResultInner object if successful.
     */
    public TransactionListResultInner listByInvoiceSectionName(String billingAccountName, String billingProfileName, String invoiceSectionName, String startDate, String endDate, String filter) {
        return listByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, startDate, endDate, filter).toBlocking().single().body();
    }

    /**
     * Lists the transactions by invoice section name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionListResultInner> listByInvoiceSectionNameAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String startDate, String endDate, String filter, final ServiceCallback<TransactionListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, startDate, endDate, filter), serviceCallback);
    }

    /**
     * Lists the transactions by invoice section name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<TransactionListResultInner> listByInvoiceSectionNameAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String startDate, String endDate, String filter) {
        return listByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, startDate, endDate, filter).map(new Func1<ServiceResponse<TransactionListResultInner>, TransactionListResultInner>() {
            @Override
            public TransactionListResultInner call(ServiceResponse<TransactionListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the transactions by invoice section name for given start date and end date.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param startDate Start date
     * @param endDate End date
     * @param filter May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<ServiceResponse<TransactionListResultInner>> listByInvoiceSectionNameWithServiceResponseAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String startDate, String endDate, String filter) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (startDate == null) {
            throw new IllegalArgumentException("Parameter startDate is required and cannot be null.");
        }
        if (endDate == null) {
            throw new IllegalArgumentException("Parameter endDate is required and cannot be null.");
        }
        return service.listByInvoiceSectionName(billingAccountName, billingProfileName, invoiceSectionName, this.client.apiVersion(), startDate, endDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionListResultInner> clientResponse = listByInvoiceSectionNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TransactionListResultInner> listByInvoiceSectionNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TransactionListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TransactionListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the transaction.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param transactionName Transaction name.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionInner object if successful.
     */
    public TransactionInner get(String billingAccountName, String billingProfileName, String transactionName, String startDate, String endDate) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, transactionName, startDate, endDate).toBlocking().single().body();
    }

    /**
     * Get the transaction.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param transactionName Transaction name.
     * @param startDate Start date
     * @param endDate End date
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionInner> getAsync(String billingAccountName, String billingProfileName, String transactionName, String startDate, String endDate, final ServiceCallback<TransactionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, billingProfileName, transactionName, startDate, endDate), serviceCallback);
    }

    /**
     * Get the transaction.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param transactionName Transaction name.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionInner object
     */
    public Observable<TransactionInner> getAsync(String billingAccountName, String billingProfileName, String transactionName, String startDate, String endDate) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, transactionName, startDate, endDate).map(new Func1<ServiceResponse<TransactionInner>, TransactionInner>() {
            @Override
            public TransactionInner call(ServiceResponse<TransactionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the transaction.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param transactionName Transaction name.
     * @param startDate Start date
     * @param endDate End date
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionInner object
     */
    public Observable<ServiceResponse<TransactionInner>> getWithServiceResponseAsync(String billingAccountName, String billingProfileName, String transactionName, String startDate, String endDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (transactionName == null) {
            throw new IllegalArgumentException("Parameter transactionName is required and cannot be null.");
        }
        if (startDate == null) {
            throw new IllegalArgumentException("Parameter startDate is required and cannot be null.");
        }
        if (endDate == null) {
            throw new IllegalArgumentException("Parameter endDate is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(billingAccountName, billingProfileName, transactionName, startDate, endDate, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TransactionInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TransactionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TransactionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionInner&gt; object if successful.
     */
    public PagedList<TransactionInner> listByBillingAccountNameNext(final String nextPageLink) {
        ServiceResponse<Page<TransactionInner>> response = listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<TransactionInner>(response.body()) {
            @Override
            public Page<TransactionInner> nextPage(String nextPageLink) {
                return listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionInner>> listByBillingAccountNameNextAsync(final String nextPageLink, final ServiceFuture<List<TransactionInner>> serviceFuture, final ListOperationCallback<TransactionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNameNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(String nextPageLink) {
                    return listByBillingAccountNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<Page<TransactionInner>> listByBillingAccountNameNextAsync(final String nextPageLink) {
        return listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<TransactionInner>>, Page<TransactionInner>>() {
                @Override
                public Page<TransactionInner> call(ServiceResponse<Page<TransactionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByBillingAccountNameNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingAccountNameNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<TransactionInner>>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(ServiceResponse<Page<TransactionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the transactions by billing account name for given start and end date.
     *
    ServiceResponse<PageImpl<TransactionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByBillingAccountNameNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingAccountNameNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionInner>> result = listByBillingAccountNameNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TransactionInner>> listByBillingAccountNameNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TransactionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TransactionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
