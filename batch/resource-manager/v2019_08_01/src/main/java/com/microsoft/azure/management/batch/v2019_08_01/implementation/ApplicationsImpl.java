/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.batch.v2019_08_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.batch.v2019_08_01.Applications;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.batch.v2019_08_01.Application;

class ApplicationsImpl extends WrapperImpl<ApplicationsInner> implements Applications {
    private final BatchManager manager;

    ApplicationsImpl(BatchManager manager) {
        super(manager.inner().applications());
        this.manager = manager;
    }

    public BatchManager manager() {
        return this.manager;
    }

    @Override
    public ApplicationImpl define(String name) {
        return wrapModel(name);
    }

    private ApplicationImpl wrapModel(ApplicationInner inner) {
        return  new ApplicationImpl(inner, manager());
    }

    private ApplicationImpl wrapModel(String name) {
        return new ApplicationImpl(name, this.manager());
    }

    @Override
    public Observable<Application> listAsync(final String resourceGroupName, final String accountName) {
        ApplicationsInner client = this.inner();
        return client.listAsync(resourceGroupName, accountName)
        .flatMapIterable(new Func1<Page<ApplicationInner>, Iterable<ApplicationInner>>() {
            @Override
            public Iterable<ApplicationInner> call(Page<ApplicationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ApplicationInner, Application>() {
            @Override
            public Application call(ApplicationInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<Application> getAsync(String resourceGroupName, String accountName, String applicationName) {
        ApplicationsInner client = this.inner();
        return client.getAsync(resourceGroupName, accountName, applicationName)
        .map(new Func1<ApplicationInner, Application>() {
            @Override
            public Application call(ApplicationInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String accountName, String applicationName) {
        ApplicationsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, accountName, applicationName).toCompletable();
    }

}
