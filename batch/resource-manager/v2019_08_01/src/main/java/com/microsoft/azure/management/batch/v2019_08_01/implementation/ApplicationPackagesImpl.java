/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.batch.v2019_08_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.batch.v2019_08_01.ApplicationPackages;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.batch.v2019_08_01.ApplicationPackage;

class ApplicationPackagesImpl extends WrapperImpl<ApplicationPackagesInner> implements ApplicationPackages {
    private final BatchManager manager;

    ApplicationPackagesImpl(BatchManager manager) {
        super(manager.inner().applicationPackages());
        this.manager = manager;
    }

    public BatchManager manager() {
        return this.manager;
    }

    @Override
    public ApplicationPackageImpl define(String name) {
        return wrapModel(name);
    }

    private ApplicationPackageImpl wrapModel(ApplicationPackageInner inner) {
        return  new ApplicationPackageImpl(inner, manager());
    }

    private ApplicationPackageImpl wrapModel(String name) {
        return new ApplicationPackageImpl(name, this.manager());
    }

    @Override
    public Observable<ApplicationPackage> activateAsync(String resourceGroupName, String accountName, String applicationName, String versionName, String format) {
        ApplicationPackagesInner client = this.inner();
        return client.activateAsync(resourceGroupName, accountName, applicationName, versionName, format)
        .map(new Func1<ApplicationPackageInner, ApplicationPackage>() {
            @Override
            public ApplicationPackage call(ApplicationPackageInner inner) {
                return new ApplicationPackageImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ApplicationPackage> listAsync(final String resourceGroupName, final String accountName, final String applicationName) {
        ApplicationPackagesInner client = this.inner();
        return client.listAsync(resourceGroupName, accountName, applicationName)
        .flatMapIterable(new Func1<Page<ApplicationPackageInner>, Iterable<ApplicationPackageInner>>() {
            @Override
            public Iterable<ApplicationPackageInner> call(Page<ApplicationPackageInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ApplicationPackageInner, ApplicationPackage>() {
            @Override
            public ApplicationPackage call(ApplicationPackageInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<ApplicationPackage> getAsync(String resourceGroupName, String accountName, String applicationName, String versionName) {
        ApplicationPackagesInner client = this.inner();
        return client.getAsync(resourceGroupName, accountName, applicationName, versionName)
        .map(new Func1<ApplicationPackageInner, ApplicationPackage>() {
            @Override
            public ApplicationPackage call(ApplicationPackageInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String accountName, String applicationName, String versionName) {
        ApplicationPackagesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, accountName, applicationName, versionName).toCompletable();
    }

}
