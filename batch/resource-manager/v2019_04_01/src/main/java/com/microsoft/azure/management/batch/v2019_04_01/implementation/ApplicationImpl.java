/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.batch.v2019_04_01.implementation;

import com.microsoft.azure.management.batch.v2019_04_01.Application;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;

class ApplicationImpl extends CreatableUpdatableImpl<Application, ApplicationInner, ApplicationImpl> implements Application, Application.Definition, Application.Update {
    private final BatchManager manager;
    private String resourceGroupName;
    private String accountName;
    private String applicationName;

    ApplicationImpl(String name, BatchManager manager) {
        super(name, new ApplicationInner());
        this.manager = manager;
        // Set resource name
        this.applicationName = name;
        //
    }

    ApplicationImpl(ApplicationInner inner, BatchManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.applicationName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "batchAccounts");
        this.applicationName = IdParsingUtils.getValueFromIdByName(inner.id(), "applications");
        //
    }

    @Override
    public BatchManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Application> createResourceAsync() {
        ApplicationsInner client = this.manager().inner().applications();
        return client.createAsync(this.resourceGroupName, this.accountName, this.applicationName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Application> updateResourceAsync() {
        ApplicationsInner client = this.manager().inner().applications();
        return client.updateAsync(this.resourceGroupName, this.accountName, this.applicationName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ApplicationInner> getInnerAsync() {
        ApplicationsInner client = this.manager().inner().applications();
        return client.getAsync(this.resourceGroupName, this.accountName, this.applicationName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public Boolean allowUpdates() {
        return this.inner().allowUpdates();
    }

    @Override
    public String defaultVersion() {
        return this.inner().defaultVersion();
    }

    @Override
    public String displayName() {
        return this.inner().displayName();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ApplicationImpl withExistingBatchAccount(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    @Override
    public ApplicationImpl withAllowUpdates(Boolean allowUpdates) {
        this.inner().withAllowUpdates(allowUpdates);
        return this;
    }

    @Override
    public ApplicationImpl withDefaultVersion(String defaultVersion) {
        this.inner().withDefaultVersion(defaultVersion);
        return this;
    }

    @Override
    public ApplicationImpl withDisplayName(String displayName) {
        this.inner().withDisplayName(displayName);
        return this;
    }

}
