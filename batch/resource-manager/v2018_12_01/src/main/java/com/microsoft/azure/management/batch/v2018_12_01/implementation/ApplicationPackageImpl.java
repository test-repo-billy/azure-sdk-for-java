/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.batch.v2018_12_01.implementation;

import com.microsoft.azure.management.batch.v2018_12_01.ApplicationPackage;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import org.joda.time.DateTime;
import com.microsoft.azure.management.batch.v2018_12_01.PackageState;

class ApplicationPackageImpl extends CreatableUpdatableImpl<ApplicationPackage, ApplicationPackageInner, ApplicationPackageImpl> implements ApplicationPackage, ApplicationPackage.Definition, ApplicationPackage.Update {
    private final BatchManager manager;
    private String resourceGroupName;
    private String accountName;
    private String applicationName;
    private String versionName;

    ApplicationPackageImpl(String name, BatchManager manager) {
        super(name, new ApplicationPackageInner());
        this.manager = manager;
        // Set resource name
        this.versionName = name;
        //
    }

    ApplicationPackageImpl(ApplicationPackageInner inner, BatchManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.versionName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "batchAccounts");
        this.applicationName = IdParsingUtils.getValueFromIdByName(inner.id(), "applications");
        this.versionName = IdParsingUtils.getValueFromIdByName(inner.id(), "versions");
        //
    }

    @Override
    public BatchManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ApplicationPackage> createResourceAsync() {
        ApplicationPackagesInner client = this.manager().inner().applicationPackages();
        return client.createAsync(this.resourceGroupName, this.accountName, this.applicationName, this.versionName)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ApplicationPackage> updateResourceAsync() {
        ApplicationPackagesInner client = this.manager().inner().applicationPackages();
        return client.createAsync(this.resourceGroupName, this.accountName, this.applicationName, this.versionName)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ApplicationPackageInner> getInnerAsync() {
        ApplicationPackagesInner client = this.manager().inner().applicationPackages();
        return client.getAsync(this.resourceGroupName, this.accountName, this.applicationName, this.versionName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String format() {
        return this.inner().format();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public DateTime lastActivationTime() {
        return this.inner().lastActivationTime();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public PackageState state() {
        return this.inner().state();
    }

    @Override
    public String storageUrl() {
        return this.inner().storageUrl();
    }

    @Override
    public DateTime storageUrlExpiry() {
        return this.inner().storageUrlExpiry();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ApplicationPackageImpl withExistingApplication(String resourceGroupName, String accountName, String applicationName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.applicationName = applicationName;
        return this;
    }

}
