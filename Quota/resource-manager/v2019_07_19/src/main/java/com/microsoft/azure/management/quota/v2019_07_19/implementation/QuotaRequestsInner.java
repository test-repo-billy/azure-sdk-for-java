/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.quota.v2019_07_19.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.quota.v2019_07_19.ExceptionResponseException;
import com.microsoft.azure.management.quota.v2019_07_19.QuotaLimits;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in QuotaRequests.
 */
public class QuotaRequestsInner {
    /** The Retrofit service to perform REST calls. */
    private QuotaRequestsService service;
    /** The service client containing this operation class. */
    private MicrosoftCapacityImpl client;

    /**
     * Initializes an instance of QuotaRequestsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public QuotaRequestsInner(Retrofit retrofit, MicrosoftCapacityImpl client) {
        this.service = retrofit.create(QuotaRequestsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for QuotaRequests to be
     * used by Retrofit to perform actually REST calls.
     */
    interface QuotaRequestsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.quota.v2019_07_19.QuotaRequests create" })
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.Capacity/providers/{providerId}/locations/{location}/serviceLimits")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("providerId") String providerId, @Path("location") String location, @Query("api-version") String apiVersion, @Body QuotaLimits createQuotaRequests, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.quota.v2019_07_19.QuotaRequests beginCreate" })
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.Capacity/providers/{providerId}/locations/{location}/serviceLimits")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("providerId") String providerId, @Path("location") String location, @Query("api-version") String apiVersion, @Body QuotaLimits createQuotaRequests, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.quota.v2019_07_19.QuotaRequests listStatus" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Capacity/providers/{providerId}/locations/{location}/quotaRequests")
        Observable<Response<ResponseBody>> listStatus(@Path("subscriptionId") String subscriptionId, @Path("providerId") String providerId, @Path("location") String location, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$skip") Integer skip, @Query("$top") Integer top, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.quota.v2019_07_19.QuotaRequests listStatusNext" })
        @GET
        Observable<Response<ResponseBody>> listStatusNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Submits a Quota Request for a resource provider at the specified location.
     * Submits Quota change request for a resource provider for the specified location. To use, first make a Get request to get quota information. This information consists of a list of resources and information regarding those resources. For all the resources in that list which require an update to their quotas, update their limit fields in the response from the Get request to their new values. Then, submit this updated JSON object to this quota request API. This will update the quotas to the values specified.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @param createQuotaRequests Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object create(String providerId, String location, QuotaLimits createQuotaRequests) {
        return createWithServiceResponseAsync(providerId, location, createQuotaRequests).toBlocking().last().body();
    }

    /**
     * Submits a Quota Request for a resource provider at the specified location.
     * Submits Quota change request for a resource provider for the specified location. To use, first make a Get request to get quota information. This information consists of a list of resources and information regarding those resources. For all the resources in that list which require an update to their quotas, update their limit fields in the response from the Get request to their new values. Then, submit this updated JSON object to this quota request API. This will update the quotas to the values specified.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @param createQuotaRequests Quota requests payload.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> createAsync(String providerId, String location, QuotaLimits createQuotaRequests, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(providerId, location, createQuotaRequests), serviceCallback);
    }

    /**
     * Submits a Quota Request for a resource provider at the specified location.
     * Submits Quota change request for a resource provider for the specified location. To use, first make a Get request to get quota information. This information consists of a list of resources and information regarding those resources. For all the resources in that list which require an update to their quotas, update their limit fields in the response from the Get request to their new values. Then, submit this updated JSON object to this quota request API. This will update the quotas to the values specified.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @param createQuotaRequests Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Object> createAsync(String providerId, String location, QuotaLimits createQuotaRequests) {
        return createWithServiceResponseAsync(providerId, location, createQuotaRequests).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Submits a Quota Request for a resource provider at the specified location.
     * Submits Quota change request for a resource provider for the specified location. To use, first make a Get request to get quota information. This information consists of a list of resources and information regarding those resources. For all the resources in that list which require an update to their quotas, update their limit fields in the response from the Get request to their new values. Then, submit this updated JSON object to this quota request API. This will update the quotas to the values specified.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @param createQuotaRequests Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Object>> createWithServiceResponseAsync(String providerId, String location, QuotaLimits createQuotaRequests) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (providerId == null) {
            throw new IllegalArgumentException("Parameter providerId is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (createQuotaRequests == null) {
            throw new IllegalArgumentException("Parameter createQuotaRequests is required and cannot be null.");
        }
        Validator.validate(createQuotaRequests);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), providerId, location, this.client.apiVersion(), createQuotaRequests, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<Object>() { }.getType());
    }

    /**
     * Submits a Quota Request for a resource provider at the specified location.
     * Submits Quota change request for a resource provider for the specified location. To use, first make a Get request to get quota information. This information consists of a list of resources and information regarding those resources. For all the resources in that list which require an update to their quotas, update their limit fields in the response from the Get request to their new values. Then, submit this updated JSON object to this quota request API. This will update the quotas to the values specified.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @param createQuotaRequests Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object beginCreate(String providerId, String location, QuotaLimits createQuotaRequests) {
        return beginCreateWithServiceResponseAsync(providerId, location, createQuotaRequests).toBlocking().single().body();
    }

    /**
     * Submits a Quota Request for a resource provider at the specified location.
     * Submits Quota change request for a resource provider for the specified location. To use, first make a Get request to get quota information. This information consists of a list of resources and information regarding those resources. For all the resources in that list which require an update to their quotas, update their limit fields in the response from the Get request to their new values. Then, submit this updated JSON object to this quota request API. This will update the quotas to the values specified.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @param createQuotaRequests Quota requests payload.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> beginCreateAsync(String providerId, String location, QuotaLimits createQuotaRequests, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(providerId, location, createQuotaRequests), serviceCallback);
    }

    /**
     * Submits a Quota Request for a resource provider at the specified location.
     * Submits Quota change request for a resource provider for the specified location. To use, first make a Get request to get quota information. This information consists of a list of resources and information regarding those resources. For all the resources in that list which require an update to their quotas, update their limit fields in the response from the Get request to their new values. Then, submit this updated JSON object to this quota request API. This will update the quotas to the values specified.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @param createQuotaRequests Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> beginCreateAsync(String providerId, String location, QuotaLimits createQuotaRequests) {
        return beginCreateWithServiceResponseAsync(providerId, location, createQuotaRequests).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Submits a Quota Request for a resource provider at the specified location.
     * Submits Quota change request for a resource provider for the specified location. To use, first make a Get request to get quota information. This information consists of a list of resources and information regarding those resources. For all the resources in that list which require an update to their quotas, update their limit fields in the response from the Get request to their new values. Then, submit this updated JSON object to this quota request API. This will update the quotas to the values specified.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @param createQuotaRequests Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> beginCreateWithServiceResponseAsync(String providerId, String location, QuotaLimits createQuotaRequests) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (providerId == null) {
            throw new IllegalArgumentException("Parameter providerId is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (createQuotaRequests == null) {
            throw new IllegalArgumentException("Parameter createQuotaRequests is required and cannot be null.");
        }
        Validator.validate(createQuotaRequests);
        return service.beginCreate(this.client.subscriptionId(), providerId, location, this.client.apiVersion(), createQuotaRequests, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> beginCreateDelegate(Response<ResponseBody> response) throws ExceptionResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, ExceptionResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<QuotaRequestDetailsInner>() { }.getType())
                .register(202, new TypeToken<QuotaRequestSubmitResponseInner>() { }.getType())
                .registerError(ExceptionResponseException.class)
                .build(response);
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;QuotaRequestDetailsInner&gt; object if successful.
     */
    public PagedList<QuotaRequestDetailsInner> listStatus(final String providerId, final String location) {
        ServiceResponse<Page<QuotaRequestDetailsInner>> response = listStatusSinglePageAsync(providerId, location).toBlocking().single();
        return new PagedList<QuotaRequestDetailsInner>(response.body()) {
            @Override
            public Page<QuotaRequestDetailsInner> nextPage(String nextPageLink) {
                return listStatusNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<QuotaRequestDetailsInner>> listStatusAsync(final String providerId, final String location, final ListOperationCallback<QuotaRequestDetailsInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStatusSinglePageAsync(providerId, location),
            new Func1<String, Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> call(String nextPageLink) {
                    return listStatusNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;QuotaRequestDetailsInner&gt; object
     */
    public Observable<Page<QuotaRequestDetailsInner>> listStatusAsync(final String providerId, final String location) {
        return listStatusWithServiceResponseAsync(providerId, location)
            .map(new Func1<ServiceResponse<Page<QuotaRequestDetailsInner>>, Page<QuotaRequestDetailsInner>>() {
                @Override
                public Page<QuotaRequestDetailsInner> call(ServiceResponse<Page<QuotaRequestDetailsInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;QuotaRequestDetailsInner&gt; object
     */
    public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> listStatusWithServiceResponseAsync(final String providerId, final String location) {
        return listStatusSinglePageAsync(providerId, location)
            .concatMap(new Func1<ServiceResponse<Page<QuotaRequestDetailsInner>>, Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> call(ServiceResponse<Page<QuotaRequestDetailsInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStatusNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;QuotaRequestDetailsInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> listStatusSinglePageAsync(final String providerId, final String location) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (providerId == null) {
            throw new IllegalArgumentException("Parameter providerId is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer skip = null;
        final Integer top = null;
        return service.listStatus(this.client.subscriptionId(), providerId, location, this.client.apiVersion(), filter, skip, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<QuotaRequestDetailsInner>> result = listStatusDelegate(response);
                        return Observable.just(new ServiceResponse<Page<QuotaRequestDetailsInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @param filter | Field                    | Supported operators
     |---------------------|------------------------
     |requestSubmitTime | ge, le, eq, gt, lt
     * @param skip Number of records to skip.
     * @param top Number of records to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;QuotaRequestDetailsInner&gt; object if successful.
     */
    public PagedList<QuotaRequestDetailsInner> listStatus(final String providerId, final String location, final String filter, final Integer skip, final Integer top) {
        ServiceResponse<Page<QuotaRequestDetailsInner>> response = listStatusSinglePageAsync(providerId, location, filter, skip, top).toBlocking().single();
        return new PagedList<QuotaRequestDetailsInner>(response.body()) {
            @Override
            public Page<QuotaRequestDetailsInner> nextPage(String nextPageLink) {
                return listStatusNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @param filter | Field                    | Supported operators
     |---------------------|------------------------
     |requestSubmitTime | ge, le, eq, gt, lt
     * @param skip Number of records to skip.
     * @param top Number of records to return.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<QuotaRequestDetailsInner>> listStatusAsync(final String providerId, final String location, final String filter, final Integer skip, final Integer top, final ListOperationCallback<QuotaRequestDetailsInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStatusSinglePageAsync(providerId, location, filter, skip, top),
            new Func1<String, Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> call(String nextPageLink) {
                    return listStatusNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @param filter | Field                    | Supported operators
     |---------------------|------------------------
     |requestSubmitTime | ge, le, eq, gt, lt
     * @param skip Number of records to skip.
     * @param top Number of records to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;QuotaRequestDetailsInner&gt; object
     */
    public Observable<Page<QuotaRequestDetailsInner>> listStatusAsync(final String providerId, final String location, final String filter, final Integer skip, final Integer top) {
        return listStatusWithServiceResponseAsync(providerId, location, filter, skip, top)
            .map(new Func1<ServiceResponse<Page<QuotaRequestDetailsInner>>, Page<QuotaRequestDetailsInner>>() {
                @Override
                public Page<QuotaRequestDetailsInner> call(ServiceResponse<Page<QuotaRequestDetailsInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
     * @param providerId Azure resource Provider id.
     * @param location Azure region.
     * @param filter | Field                    | Supported operators
     |---------------------|------------------------
     |requestSubmitTime | ge, le, eq, gt, lt
     * @param skip Number of records to skip.
     * @param top Number of records to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;QuotaRequestDetailsInner&gt; object
     */
    public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> listStatusWithServiceResponseAsync(final String providerId, final String location, final String filter, final Integer skip, final Integer top) {
        return listStatusSinglePageAsync(providerId, location, filter, skip, top)
            .concatMap(new Func1<ServiceResponse<Page<QuotaRequestDetailsInner>>, Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> call(ServiceResponse<Page<QuotaRequestDetailsInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStatusNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
    ServiceResponse<PageImpl<QuotaRequestDetailsInner>> * @param providerId Azure resource Provider id.
    ServiceResponse<PageImpl<QuotaRequestDetailsInner>> * @param location Azure region.
    ServiceResponse<PageImpl<QuotaRequestDetailsInner>> * @param filter | Field                    | Supported operators
     |---------------------|------------------------
     |requestSubmitTime | ge, le, eq, gt, lt
    ServiceResponse<PageImpl<QuotaRequestDetailsInner>> * @param skip Number of records to skip.
    ServiceResponse<PageImpl<QuotaRequestDetailsInner>> * @param top Number of records to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;QuotaRequestDetailsInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> listStatusSinglePageAsync(final String providerId, final String location, final String filter, final Integer skip, final Integer top) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (providerId == null) {
            throw new IllegalArgumentException("Parameter providerId is required and cannot be null.");
        }
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listStatus(this.client.subscriptionId(), providerId, location, this.client.apiVersion(), filter, skip, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<QuotaRequestDetailsInner>> result = listStatusDelegate(response);
                        return Observable.just(new ServiceResponse<Page<QuotaRequestDetailsInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<QuotaRequestDetailsInner>> listStatusDelegate(Response<ResponseBody> response) throws ExceptionResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<QuotaRequestDetailsInner>, ExceptionResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<QuotaRequestDetailsInner>>() { }.getType())
                .registerError(ExceptionResponseException.class)
                .build(response);
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ExceptionResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;QuotaRequestDetailsInner&gt; object if successful.
     */
    public PagedList<QuotaRequestDetailsInner> listStatusNext(final String nextPageLink) {
        ServiceResponse<Page<QuotaRequestDetailsInner>> response = listStatusNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<QuotaRequestDetailsInner>(response.body()) {
            @Override
            public Page<QuotaRequestDetailsInner> nextPage(String nextPageLink) {
                return listStatusNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<QuotaRequestDetailsInner>> listStatusNextAsync(final String nextPageLink, final ServiceFuture<List<QuotaRequestDetailsInner>> serviceFuture, final ListOperationCallback<QuotaRequestDetailsInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStatusNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> call(String nextPageLink) {
                    return listStatusNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;QuotaRequestDetailsInner&gt; object
     */
    public Observable<Page<QuotaRequestDetailsInner>> listStatusNextAsync(final String nextPageLink) {
        return listStatusNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<QuotaRequestDetailsInner>>, Page<QuotaRequestDetailsInner>>() {
                @Override
                public Page<QuotaRequestDetailsInner> call(ServiceResponse<Page<QuotaRequestDetailsInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;QuotaRequestDetailsInner&gt; object
     */
    public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> listStatusNextWithServiceResponseAsync(final String nextPageLink) {
        return listStatusNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<QuotaRequestDetailsInner>>, Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> call(ServiceResponse<Page<QuotaRequestDetailsInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStatusNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * For the specified location and resource Provider, gets the current quota requests under the subscription over the time
      period of one year ago from now to one year back.
     * For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.
     *
    ServiceResponse<PageImpl<QuotaRequestDetailsInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;QuotaRequestDetailsInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> listStatusNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listStatusNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QuotaRequestDetailsInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<QuotaRequestDetailsInner>> result = listStatusNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<QuotaRequestDetailsInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<QuotaRequestDetailsInner>> listStatusNextDelegate(Response<ResponseBody> response) throws ExceptionResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<QuotaRequestDetailsInner>, ExceptionResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<QuotaRequestDetailsInner>>() { }.getType())
                .registerError(ExceptionResponseException.class)
                .build(response);
    }

}
